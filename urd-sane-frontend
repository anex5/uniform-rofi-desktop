#!/usr/bin/env bash
ORIGIN="$(readlink -q "${BASH_SOURCE[0]}" || echo -e "${BASH_SOURCE[0]}" )"
cd "${ORIGIN%/*}"
source "./common/definitions"
prog="${0##*/}"
args=$*
nprog=${prog//-/_}
usage="${texts[usage]}: ${prog} [${texts[options]}]

    ${texts[usage_${nprog##*urd_}]^}
    ${common_usage}
"
# parse options

handle_common_opts "$@"
source "./common/langs/${default_lang}"  # sourcing default lang here is urgent for common optional argument -lang=xx_XX
rofiargs="${rofiargs// -dmenu} -dmenu"
#default_themestr+="element-text { tab-stops: [8em, 9em, 10.1em]; } "
header="${texts[header_sane_frontend]}"
theme="./common/themes/vertical_menu.rasi"

SCANIMAGE="/usr/bin/scanimage"
output_path="/tmp"
output_file_name="urd-sane-scan"

image_mode_menu() {
    local device_name="${devices[${1}]%%|*}"
    local device_path="${devices[${1}]##*|}"
    entries="";

    for i in "${!img_modes[@]}"; do
        enabled=$([[ "${curr_img_mode}" == "${img_modes[i]}" ]] && echo true || echo false )
        entries+="$(write_menuentry "${texts[${img_modes[i]}]}" \
            "set_image_mode ${1} ${img_modes[i]}" \
            "${icons[image_mode]}" "${enabled}" "true" "false" "false" \
            "${texts[cantset]^} ${texts[scanner]} ${texts[image_mode]}" \
        )"
    done
    header="${texts[header_sane_image_modes]^}"
    theme="./common/themes/vertical_menu.rasi"

    handle_rofi
    return $?
}

image_format_menu() {
    local device_name="${devices[${1}]%%|*}"
    local device_path="${devices[${1}]##*|}"

    entries="";
    for i in "${!img_formats[@]}"; do
        enabled=$([[ "${curr_img_format}" == "${img_formats[i]}" ]] && echo true || echo false )
        entries+="$(write_menuentry "${texts[${img_formats[i]}]}" \
            "set_image_format ${1} ${img_formats[i]}" \
            "${icons[image_format]}" "${enabled}" "true" "false" "false" \
            "${texts[cantset]^} ${texts[scanner]} ${texts[image_format]}" \
        )"
    done
    header="${texts[header_sane_image_formats]^}"
    theme="./common/themes/vertical_menu.rasi"

    handle_rofi
    return $?
}

image_resolution_menu() {
    local device_name="${devices[${1}]%%|*}"
    local device_path="${devices[${1}]##*|}"
    entries="";

    for i in "${!img_resolutions[@]}"; do
        enabled=$([[ "${curr_img_resolution}" == "${img_resolutions[i]}" ]] && echo true || echo false )
        entries+="$(write_menuentry "${texts[${img_resolutions[i]}]}" \
            "set_image_resolution ${1} ${img_resolutions[i]}" \
            "${icons[image_resolution]}" "${enabled}" "true" "false" "false" \
            "${texts[cantset]^} ${texts[scanner]} ${texts[image_format]}" \
        )"
    done
    header="${texts[header_sane_image_resolutions]^}"
    theme="./common/themes/vertical_menu.rasi"

    handle_rofi
    return $?
}

image_depth_menu() {
    local device_name="${devices[${1}]%%|*}"
    local device_path="${devices[${1}]##*|}"
    entries="";

    for i in "${!img_depths[@]}"; do
        enabled=$([[ "${curr_img_depth}" == "${img_depths[i]}" ]] && echo true || echo false )
        entries+="$(write_menuentry "${texts[${img_depths[i]}]}" \
            "set_img_depth ${1} ${img_depths[i]}" \
            "${icons[image_depth]}" "${enabled}" "true" "false" "false" \
            "${texts[cantset]^} ${texts[scanner]} ${texts[image_format]}" \
        )"
    done
    header="${texts[header_sane_image_depths]^}"
    theme="./common/themes/vertical_menu.rasi"

    handle_rofi
    return $?
}

image_path_menu() {
    curr_img_location="${2}"
    local device_name="${devices[${1}]%%|*}"
    local device_path="${devices[${1}]##*|}"
    entries="";
    
    f="$(${ROFI} ${rofiargs// -dmenu} -show filebrowser -theme-str "@import \"./common/themes/vertical_menu.rasi\"" \
        -filebrowser-directories-first true \
        -filebrowser-directory "${output_path#~/$HOME}" \
        -filebrowser-filter-regex "^.*$" \
        -filebrowser-command "echo -en " \
        -filebrowser-fallback-icon "image-x-generic" \
    )"
    output_path="${f}"
    #send_notification "${output_path}"

    return $?
}

settings_menu() {
    local device_name="${devices[${1}]%%|*}"
    local device_path="${devices[${1}]##*|}"
    entries=""

    entries+="$(write_menuentry "${texts[image_mode]^}: ${texts[${img_modes[curr_img_mode]}]}" \
        "image_mode_menu ${1} ${img_modes[curr_img_mode]}" \
        "${icons[image_mode]}" "${saved}" "true" "false" "false" \
        "${texts[cantset]^} ${texts[scanner]} ${texts[image_mode]^}" \
    )"

    entries+="$(write_menuentry "${texts[image_format]^}: ${img_formats[curr_img_format]}" \
        "image_format_menu ${1} ${img_formats[curr_img_format]}" \
        "${icons[image_format]}" "${saved}" "true" "false" "false" \
        "${texts[cantset]^} ${texts[scanner]} ${texts[image_format]^}" \
    )"

    entries+="$(write_menuentry "${texts[image_resolution]^}: ${img_resolutions[curr_img_resolution]} ${texts[ppi]}" \
        "image_resolution_menu ${1} ${img_resolutions[curr_img_resolution]}" \
        "${icons[image_resolution]}" "${saved}" "true" "false" "false" \
        "${texts[cantset]^} ${texts[scanner]} ${texts[image_resolution]}" \
    )"

    entries+="$(write_menuentry "${texts[image_depth]^}: ${img_depths[curr_img_depth]} ${texts[bits]}" \
        "image_depth_menu ${1} ${img_depths[curr_img_depth]}" \
        "${icons[image_depth]}" "${saved}" "true" "false" "false" \
        "${texts[cantset]^} ${texts[scanner]} ${texts[image_depth]}" \
    )"

    entries+="$(write_menuentry "${texts[image_position]^}: ${curr_img_position} ${texts[mm]}" \
        "image_position_menu ${1} ${curr_img_position}" \
        "${icons[image_position]}" "${saved}" "true" "false" "false" \
        "${texts[cantset]^} ${texts[scanner]} ${texts[image_position]}" \
    )"

    entries+="$(write_menuentry "${texts[image_path]^}: ${output_file_name%\/*}" \
        "image_path_menu ${1} ${output_file_name}" \
        "${icons[image_folder]}" "${saved}" "true" "false" "false" \
        "${texts[cantset]^} ${texts[scanner]} ${texts[image_path]}" \
    )"

    header="${texts[availiable]^} ${texts[options]} ${device_name}"
    theme="./common/themes/vertical_menu.rasi"
    
    handle_rofi
    return $?
}

declare -a availiable_options img_modes img_resolutions img_depths img_formats
img_modes=("color" "gray")
img_resolutions=("4800" "2400" "1200" "600" "300" "150" "100" "75")
img_depths=("8" "16")
img_formats=("pnm" "tiff" "png" "jpeg" "pdf")

curr_img_format=2
curr_img_mode=0
curr_img_depth=0
curr_img_resolution=4
curr_img_position="-l 0 -t 0 -x 216.7 -y 300"
curr_img_preview="yes"

IFS=$NF read -r -d '' -a devices <<< "$(${SCANIMAGE} --formatted-device-list="%v %m|%d")"

[[ ${#devices[@]} -eq 0 ]] && die 1 "${texts[noscanners]:-"No scanners found"}"

for i in "${!devices[@]}"; do
    device_name="${devices[i]%%|*}"
    device_path="${devices[i]##*|}"
    availiable_options[i]="$(${SCANIMAGE} -L --device-name=${device_path})"
    
    device_options="--format=${img_formats[curr_img_format]} --output-file="${output_file_name}.${img_formats[curr_img_format]}" --preview=${curr_img_preview} \
    --resolution=${img_resolutions[curr_img_resolution]} --depth=${img_depths[curr_img_depth]} --mode=${img_modes[curr_img_mode]^} ${curr_img_position}"
    entries+="$(write_menuentry "${device_name}" "settings_menu ${i} ${availiable_options}" \
        "${icons[USB]}" "${availiable}" "true" \
    )"
    test -f "${output_file_name}.${img_formats[curr_img_format]}" && scanned="true" || scanned="false"

    entries+="$(write_menuentry "<span>${branch[1]}</span>${texts[scan]^}" \
        "catch_posix retcode error_msg ${SCANIMAGE} ${device_options} --device-name=${device_path}" \
        "${icons[scan]}" "${scanned}" "true" "false" "false" \
        "${texts[cant]^} ${texts[scan]}" \
    )"
done

handle_rofi

