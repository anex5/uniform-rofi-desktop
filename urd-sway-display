#!/usr/bin/env sh
ORIGIN="$(readlink -q "${BASH_SOURCE[0]}" || echo -e "${BASH_SOURCE[0]}" )"
cd "${ORIGIN%/*}"
SWAYMSG="swaymsg"
SWAYBG="swaybg"
MPVPAPER='mpvpaper -f -p -o profile=mpvpaper'
JQ="/usr/bin/jq --unbuffered -r"
RDEPS+="${SWAYMSG},${SWAYBG},${MPVPAPER},${JQ},"

WPSRCDIR="~/Wallpapers"
source "./common/definitions"
prog="${0##*/}"
args=$*
nprog=${prog//-/_}
usage="${texts[usage]}: ${prog} [${texts[options]}]

    ${texts[usage_${nprog##*urd_}]^}
    ${common_usage}
"
# parse options

handle_common_opts "$@"

rofiargs="${default_rofiargs} -no-custom -format i "
# default_themestr+="element-text { tab-stops: [8em, 9em, 10.1em]; } "
theme="./common/themes/vertical_menu.rasi"
header="${texts[header_sway_display]:-"Header not set"}"

declare -A switch power
switch=( 
    [true]=off [false]=on
    [enabled]=off [disabled]=on
)
power=(
    [enabled]=on [disabled]=off
)

default_transform(){
    local transform="${1?${texts[missingarg]:-"Missing argument transform"}}"
    [[ "${transform}" == "normal" ]] && echo true || echo false
}

mklink() {
    local index="${1?${texts[missingarg]:-"Missing argument index"}}"
    IFS='|' read -d '' -r bgname bginfill bgcolor null <<< "${last_bg[${index}]}|"
    local display="${displays[index]}"
    #send_notification "name: ${bgname}, infill: ${bginfill}, color: ${bgcolor}"
    ${FIND} "${HOME}/.local/state" -type l -name "lastbg_${display#* }_*" -exec rm {} \;
    ln -snf "${bgname}" "${HOME}/.local/state/lastbg_${display#* }_${bginfill}_${bgcolor}"
    return $?
}

set_mode() {
    local index="${1?${texts[missingarg]:-"Missing argument index"}}"
    local display="${displays[index]}"
    entries=""; actions=(); error_msgs=(); confirm=(); nocatch=();
    IFS=$NF read -r -d '' -a modes <<< "$($JQ '.['${index}'] | .modes[] |  [.width, "x", .height, "@", .refresh] | join("")' <<< ${outputs})"
    for i in "${!modes[@]}"; do
        enabled=$([[ "${curr_modes[index]}" == "${modes[i]}" ]] && echo true || echo false )
        entries+="$(write_menuentry "${modes[i]:0:-3}.${modes[i]: -3}Hz" "${enabled}" "${icons[displaymode]}")\n"
        actions+=( "${SWAYMSG} output \"${display#* }\" mode \"${modes[$i]:0:-3}.${modes[$i]: -3}Hz\"" )
        error_msgs+=( "${texts[cantset]} ${texts[display]} ${texts[displaymode]}" )
    done
    #header="${texts[header_sway_display_modes]:-"Availiable display modes"}"
    header="${texts[availiable]} ${texts[options]} ${texts[modes]}"

    theme="./common/themes/vertical_menu.rasi"
    handle_rofi
    return $?
}

set_position() {
    local rofi_ret pos
    local index="${1?${texts[missingarg]:-"Missing argument index"}}"
    local display="${displays[index]}"
    local curr_pos="${positions[index]%%,*}, ${positions[index]##*, }"
    pos=$(./urd-prompt -n "${texts[display_position]:-"Enter display position coordinates"} (${curr_pos})" -p "${texts[displayposition]^}" )
    rofi_ret="$?"
    test ${rofi_ret} -eq 0 && run_menuentry_action "${SWAYMSG} output \"${display#* }\" position \"${pos}\"" "${texts[cantset]} ${texts[display]} ${texts[position]}"
    return $?
}

set_scale() {
    local rofi_ret scale
    local index="${1?${texts[missingarg]:-"Missing argument index"}}"
    local display="${displays[index]}"
    local curr_scale="${scales[index]}"
    scale="$(./urd-prompt -n "${texts[display_scale]:-"Enter display scale multiplier"}" -p "${texts[displayscale]^}" )"
    rofi_ret="$?"
    test ${rofi_ret} -eq 0 && run_menuentry_action "${SWAYMSG} output \"${display#* }\" scale \"${scale}\"" "${texts[cantset]} ${texts[display]} ${texts[scale]}"
    return $?
}

set_transform() {
    local index="${1?${texts[missingarg]:-"Missing argument index"}}"
    local display="${displays[index]}"
    local curr_trans="${transforms[index]}"
    declare -a trans
    entries=""; actions=(); error_msgs=(); confirm=(); nocatch=();
    trans=("normal" "flipped" "90" "180" "270" "flipped-90" "flipped-180" "flipped-270")
    for i in "${!trans[@]}"; do
        enabled=$([[ "${curr_trans}" == "${trans[i]}" ]] && echo true || echo false )
        entries+="$(write_menuentry "${texts[displaytransform_${trans[$i]}]^}" "${enabled}" "${icons[displaytransform]}")\n"
        actions+=( "${SWAYMSG} output \"${display#* }\" transform ${trans[i]}" )
        error_msgs+=( "${texts[cantset]} ${texts[display]} ${texts[transform]}" )
    done
    header="${texts[availiable]} ${texts[options]} ${texts[transform]}"
    theme="./common/themes/vertical_menu.rasi"

    handle_rofi
    return $?
}

set_hinting() {
    local index="${1?${texts[missingarg]:-"Missing argument index"}}"
    local display="${displays[index]}"
    local curr_hint="${hintings[index]}"
    entries=""; actions=(); error_msgs=(); confirm=(); nocatch=();
    declare -a hints
    local hints=("rgb" "bgr" "vrgb" "vbgr" "none")
    for i in "${!hints[@]}"; do
        enabled=$([[ "${curr_hint}" == "${hints[i]}" ]] && echo true || echo false )
        entries+="$(write_menuentry "${texts[${hints[i]}]}" "${enabled}" "${icons[displayhinting]}")\n"
        actions+=( "${SWAYMSG} output \"${display#* }\" subpixel ${hints[$i]}" )
        error_msgs+=( "${texts[cantset]} ${texts[display]} ${texts[hinting]}" )
    done
    header="${texts[availiable]} ${texts[hinting]}"
    theme="./common/themes/vertical_menu.rasi"
    
    handle_rofi
    return $?
}

change_bg() {
    local index="${1?${texts[missingarg]:-"Missing argument index"}}"; shift
    local bg="${@?${texts[missingarg]:-"Missing argument bg"}}"
    IFS='|' read -d '' -r bgname bginfill bgcolor null <<< "${last_bg[${index}]}|"
    local display="${displays[index]}"
    #send_notification "Attempt to set background: ${bg##*.}" "On display ${display#* }"
    case "${bg##*.}" in
        "jpg"|"jpeg"|"bmp"|"png"|"webp")
            killall mpvpaper
            # Use full display name i.e. ${display#* } to override default value in sway config
            last_bg[${index}]="${bg}|${bginfill}|${bgcolor}"
            ${SWAYMSG} output \"${display#* }\" bg \"${bg@Q}\" \"${bginfill}\" \"#${bgcolor}\" && mklink ${index}
        ;;
        "avi"|"mp4"|"webm")
            killall swaybg
            killall mpvpaper
            last_bg[${index}]="${bg}|${bginfill}|${bgcolor}"
            # Use port display name i.e. ${display%% *} as mpvpaper do not understand full display name
            ${SWAYMSG} exec -- ${MPVPAPER} ${display%% *} ${bg@Q} && mklink ${index}
        ;;
        \#[0-9A-F][0-9A-F][0-9A-F][0-9A-F][0-9A-F][0-9A-F])
            killall mpvpaper
            last_bg[${index}]="${texts[varunset]}|${bginfill}|${bg//#}"
            ${SWAYMSG} output \"${display#* }\" bg \"${bg}\" solid_color && mklink ${index}
    esac
    return $?
}

set_bg_image() {
    local index="${1?${texts[missingarg]:-"Missing argument index"}}"
    local display="${displays[index]}"
    #entries=""; actions=(); error_msgs=(); confirm=(); nocatch=();

    f="$(${ROFI} ${rofiargs// -dmenu} -show filebrowser -theme-str "@import \"./common/themes/vertical_menu.rasi\"" \
        -filebrowser-directories-first true \
        -filebrowser-directory "${WPSRCDIR/#~/$HOME}" \
        -filebrowser-filter-regex "^.*(?<!\.(jpg|png|bmp|jpeg|webp))$" \
        -filebrowser-command "echo -en ")"
    #declare -a bgs
    #IFS=$NF read -d '' -a bgs <<< "$(${FIND} ${WPSRCDIR/#~/$HOME} -type f \
    #    -name \*\.jpg -o -name \*\.jpeg -o -name \*\.bmp -o -name \*\.png -o -name \*\.webp)"
    #for f in "${bgs[@]}"; do
    #    current="$([[ " ${f} " =~ " ${last_bg[$index]%%|*} " ]] && echo true || echo false )"
    #    entries+="$(write_menuentry "${f##*/}" "${current}" "${f}")\n"
        # Use full display name i.e. ${display#* } to override default value in sway config
    #    actions+=("change_bg ${index} ${f}")
    #    error_msgs+=( "${texts[cantset]} ${texts[display]} ${texts[image]} ${texts[background]}" )
    #done
    #header="${texts[availiable]^} ${texts[display]} ${texts[backgrounds]}"
    #theme="./common/themes/vertical_menu.rasi"
    #handle_rofi
    if [ -a "${f}" ]; then 
        change_bg ${index} "${f}"
    else
        send_notification "${texts[cant]^} ${texts[open]} ${texts[file]} ${f}"
    fi
    return $?
}

set_bg_video() {
    local index="${1?${texts[missingarg]:-"Missing argument index"}}"
    local display="${displays[index]}"
    #entries=""; actions=(); error_msgs=(); confirm=(); nocatch=();
    #declare -a bgs
    #IFS=$NF read -d '' -a bgs <<< "$(${FIND} ${WPSRCDIR/#~/$HOME} -type f \
    #    -name \*\.wmv -o -name \*\.mpeg -o -name \*\.mp4 -o -name \*\.webm -o -name \*\.avi)"
    #for f in "${bgs[@]}"; do
    #    current="$([[ " ${f} " =~ " ${last_bg[$index]%% *} " ]] && echo true || echo false )"
    #    entries+="$(write_menuentry "${f##*/}" "${current}" "${icons[videofile]}")\n"
    #    actions+=( "change_bg ${index} ${f}" )
    #    error_msgs+=( "${texts[cantset]} ${texts[display]} ${texts[video]} ${texts[background]}" )
    #done
    #header="${texts[availiable]^} ${texts[display]} ${texts[video]} ${texts[backgrounds]}"
    #theme="./common/themes/vertical_menu.rasi"
    #handle_rofi

    f="$(${ROFI} ${rofiargs// -dmenu} -show filebrowser -theme-str "@import \"./common/themes/vertical_menu.rasi\"" \
        -filebrowser-directories-first true \
        -filebrowser-directory "${WPSRCDIR/#~/$HOME}" \
        -filebrowser-filter-regex "^.*(?<!\.(avi|mp4|mpeg|ts|webm|wmv))$" \
        -filebrowser-command "echo -en ")"
    
    if [ -a "${f}" ]; then 
        change_bg ${index} "${f}"
    else
        send_notification "${texts[cant]^} ${texts[open]} ${texts[file]} ${f}"
    fi
    return $?
}

set_bg_solid_color(){
    local index="${1?${texts[missingarg]:-"Missing argument index"}}"
    local display="${displays[index]}"
    entries=""; actions=(); error_msgs=(); confirm=(); nocatch=();
    declare -a colors
    colors=("#990000" "#009900" "#000099" "#000000" "#999999")
    for f in "${colors[@]}"; do
        current="$([[ " ${f} " =~ " ${last_bg[${index}]%%|*} " ]] && echo true || echo false )"
        entries+="$(write_menuentry "${f}" "${current}" "<span background=\"${f}\">\U3000</span>")\n"
        actions+=( "change_bg ${index} ${f}" )
        error_msgs+=( "${texts[cantset]} ${texts[display]} ${texts[solidcolor]} ${texts[background]}" )
    done
    header="${texts[availiable]^} ${texts[display]} ${texts[colors]}"
    theme="./common/themes/vertical_menu.rasi"
    handle_rofi
    return $?
}

is_video(){
    local file="${@?${texts[missingarg]:-"Missing argument file"}}"
    [[ " wmv mpeg mp4 webm avi vob ts mkv " =~ " ${file##*.} " ]] && echo true || echo false
}

is_image(){
    local file="${@?${texts[missingarg]:-"Missing argument file"}}"
    [[ " jpg jpeg bmp png webp tiff " =~ " ${file##*.} " ]] && echo true || echo false
}

is_solid(){
    local file="${@?${texts[missingarg]:-"Missing argument file"}}"
    [[ "${file}" == "${texts[varunset]}" ]] && echo true || echo false
}

set_bg_infill() {
    local index="${1?${texts[missingarg]:-"Missing argument index"}}"
    local display="${displays[index]}"
    IFS='|' read -r -d '\0' bgname bginfill bgcolor <<< "${last_bg[${index}]}"
    #send_notification "bg: ${last_bg[$index]} name: ${bgname} infill: ${bginfill} color: ${bgcolor}"
    entries=""; actions=(); error_msgs=(); confirm=(); nocatch=();
    declare -a hints
    local infills=( "fill" "stretch" "center" "tile" )
    for i in "${!infills[@]}"; do
        enabled=$([[ "${bginfill}" == "${infills[i]}" ]] && echo true || echo false )
        entries+="$(write_menuentry "${texts[${infills[i]}]^}" "${enabled}" "${icons[display${infills[i]}]}")\n"
        actions+=("change_infill ${index} ${infills[i]}")
        error_msgs+=( "${texts[cantset]} ${texts[display]} ${texts[background]} ${texts[infills]}" )
    done
    header="${texts[availiable]} ${texts[options]} ${texts[infills]}"
    theme="./common/themes/vertical_menu.rasi"
    
    handle_rofi
    return $?
}

change_infill() {
    local index="${1?${texts[missingarg]:-"Missing argument index"}}"; shift
    local infill="${@?${texts[missingarg]:-"Missing argument infill"}}"
    local display="${displays[${index}]}"
    #send_notification "Attempt to set infill: ${infill}" "On display ${display#* } bg: ${last_bg[$index]##*|}"
    # Use full display name i.e. ${display#* } to override default value in sway config
    last_bg[${index}]="${last_bg[$index]%%|*}|${infill}|${last_bg[$index]##*|}"
    ${SWAYMSG} output \"${display#* }\" bg \"${last_bg[$index]%%|*}\" \"${infill}\" \"#${last_bg[$index]##*|}\" && mklink ${index}

    return $?
}

is_saved() {
    local index="${1?${texts[missingarg]:-"Missing argument index"}}"; shift
    local display="${displays[${index}]}"
    local config_path="~/.config/sway"
    local config_name="${config_path}/urd-sway-display-${display#* }"

    local saved_mode=$(${SED} -ne "/output \"${display#* }\" {/,/}/s|^.*mode \(.*Hz\)$|\1|p" "${config_name}")
    local saved_bg=$(${SED} -ne "/output \"${display#* }\" {/,/}/s|^.*bg \(.*\)$|\1|p" "${config_name}")
    local saved_position=$(${SED} -ne "/output \"${display#* }\" {/,/}/s|^.*position \(.*\)$|\1|p" "${config_name}")
    local saved_scale=$(${SED} -ne "/output \"${display#* }\" {/,/}/s|^.*scale \(.*\)$|\1|p" "${config_name}")
    local saved_transform=$(${SED} -ne "/output \"${display#* }\" {/,/}/s|^.*transform \(.*\)$|\1|p" "${config_name}")
    local saved_subpixel=$(${SED} -ne "/output \"${display#* }\" {/,/}/s|^.*subpixel \(.*\)$|\1|p" "${config_name}")
    local saved_adaptive_sync=$(${SED} -ne "/output \"${display#* }\" {/,/}/s|^.*adaptive_sync \(.*\)$|\1|p" "${config_name}")

    #send_notification "$saved_mode | $saved_bg | $saved_position | $saved_scale | $saved_transform | $saved_subpixel | $saved_adaptive_sync"
    send_notification "${saved_bg//#/} ${last_bg[$index]//|/ }"

    if \
        [[ "${saved_bg//#/}" == "${last_bg[$index]//|/ }" ]] &&\
        [[ "${saved_mode}" == "${curr_modes[$index]:0:-3}.${curr_modes[$index]: -3}Hz" ]] &&\
        [[ "${saved_position}" == "${positions[$index]//,/}" ]] &&\
        [[ "${saved_scale}" == "${scales[$index]}" ]] &&\
        [[ "${saved_transform}" == "${transforms[$index]}" ]] &&\
        [[ "${saved_subpixel}" == "${hintings[$index]}" ]] &&\
        [[ "${saved_adaptive_sync}" == "${power[${adsyncs[$index]}]}" ]]; then 
        echo true
    else
        echo false
    fi 
}

save_settings() {
    local index="${1?${texts[missingarg]:-"Missing argument index"}}"; shift
    local display="${displays[${index}]}"
    #send_notification "Attempt to save settings: ${display}" "On display ${display#* } bg: ${last_bg[$index]##*|}"
    # Use full display name i.e. ${display#* } to override default value in sway config
    IFS='|' read -r -d '\0' bgname bginfill bgcolor null <<< "${last_bg[${index}]}|"
    
    local config_path="~/.config/sway"
    local config_name="${config_path}/urd-sway-display-${display#* }"
    local config_included="$(${GREP} -q "include ${config_path}/'${config_name##*/}'" "${config_path}/config" && echo true || echo false)"
    test ${config_included} || echo -e "include ${config_path}/'${config_name##*/}'" >> "${config_path}/config"
        
    echo -e "output \"${display#* }\" {" > "${config_name}"
    echo -e "    mode ${curr_modes[$index]:0:-3}.${curr_modes[$index]: -3}Hz" >> "${config_name}"
    echo -e "    bg ${bgname} ${bginfill} #${bgcolor}" >> "${config_name}"
    echo -e "    position ${positions[$index]//,/}" >> "${config_name}"
    echo -e "    scale ${scales[$index]}" >> "${config_name}"
    echo -e "    transform ${transforms[$index]}" >> "${config_name}"
    echo -e "    subpixel ${hintings[$index]}" >> "${config_name}"
    echo -e "    adaptive_sync ${power[${adsyncs[$index]}]}" >> "${config_name}"
    echo -e "}" >> "${config_name}"

    return $?
}

set_backgrounds() {
    local index="${1?${texts[missingarg]:-"Missing argument index"}}"
    local display="${displays[index]}"
    entries=""; actions=(); error_msgs=(); confirm=(); nocatch=();
    infill="$(cut -d'|' -f 2 <<< "${last_bg[${index}]}")"
    #send_notification "infill: ${infill} bg: ${last_bg[${index}]%%|*}"

    entries+="$(write_menuentry "${texts[infills]^}: ${texts[${infill}]^}" "false" "${icons[displayinfill]}" "true")\n"
    actions+=( "set_bg_infill ${i}" )
    error_msgs+=( "" ) #${texts[cantset]} ${texts[background]} ${texts[infill]}" )

    entries+="$(write_menuentry "${texts[solidcolor]^}" "$(is_solid ${last_bg[${index}]%%|*})" "<span background=\"#${last_bg[$index]##*|}\">\U3000</span>" "true")\n"
    actions+=( "set_bg_solid_color ${i}" )
    error_msgs+=( "" ) #${texts[cantset]} ${texts[display]} ${texts[solidcolor]} ${texts[background]}" )
    
    entries+="$(write_menuentry "${texts[image]^}" "$(is_image ${last_bg[${index}]%%|*})" "${icons[imagefile]}" "true")\n"
    actions+=( "set_bg_image ${i}" )
    error_msgs+=( "" ) #${texts[cantset]} ${texts[display]} ${texts[image]} ${texts[background]}" )
    
    entries+="$(write_menuentry "${texts[video]^}" "$(is_video ${last_bg[${index}]%%|*})" "${icons[videofile]}" "true")\n"
    actions+=( "set_bg_video ${i}" )
    error_msgs+=( "" ) #${texts[cantset]} ${texts[display]} ${texts[video]} ${texts[background]}" )

    header="${texts[availiable]} ${texts[display]} ${texts[backgrounds]}"
    theme="./common/themes/vertical_menu.rasi"
    
    handle_rofi
    return $?
}

set_display() {
    local i="${1?${texts[missingarg]:-"Missing argument index"}}"
    local display="${displays[i]}"
    entries=""; actions=(); error_msgs=(); confirm=(); nocatch=();
    
    entries+="$(write_menuentry "${texts[${switch[${enabled[$i]}]}]^}" "${enabled[$i]}" "${icons[power]}" "true")\n"
    actions+=("${SWAYMSG} output \"${display#* }\" toggle")
    error_msgs+=("${texts[cantset]} ${texts[displayactive]}")
    confirm+=( true )
    
    if ${enabled[$i]}; then
    entries+="$(write_menuentry "${texts[displaymode]^}: ${curr_modes[i]:0:-3},${curr_modes[$i]: -3}" "false" "${icons[displaymode]}" "true")\n"
    actions+=( "set_mode ${i}" )
    error_msgs+=("")

    entries+="$(write_menuentry "${texts[displayposition]^}: ${texts[top]}: ${positions[$i]%%,*}, ${texts[left]}: ${positions[$i]##*, }" "false" "${icons[displayposition]}" "true")\n"
    actions+=( "set_position ${i}" )
    error_msgs+=("")
    
    entries+="$(write_menuentry "${texts[displayscale]^}: ${scales[$i]}" "false" "${icons[search]}" "true")\n"
    actions+=( "set_scale ${i}" )
    error_msgs+=("")
    
    entries+="$(write_menuentry "${texts[displaytransform]^}: ${texts[displaytransform_${transforms[$i]}]}" "${default_transform[${transforms[$i]}]}" "${icons[displaytransform]}" "true")\n"
    actions+=( "set_transform ${i}" )
    error_msgs+=("")
    
    entries+="$(write_menuentry "${texts[adaptive_sync]^}: ${texts[${switch[${adsyncs[$i]}]}]}" "${bool[${adsyncs[$i]}]}" "${icons[displaysync]}" "true")\n"
    actions+=( "${SWAYMSG} output \"${display#* }\" adaptive_sync ${switch[${adsyncs[$i]}]}" )
    error_msgs+=("${texts[cantset]} ${texts[adaptive_sync]}")

    entries+="$(write_menuentry "${texts[subpixel_hinting]^}: ${texts[${hintings[$i]}]}" "false" "${icons[displayhinting]}" "true")\n"
    actions+=( "set_hinting ${i}" )
    error_msgs+=("")
    
    #entries+="$(write_menuentry "<span>${branch[1]}</span> ${texts[render_bit_depth]^}: ${hdrs[i]}")\n"
    #actions+=("swaymsg output ${displays[i]%% *} render_bit_depth ${hdr[${hdrs[i]}]}")
    #error_msgs+=("${texts[cantset]} ${texts[render_bit_depth]}")
    
    entries+="$(write_menuentry "${texts[backgrounds]^}" "$([[ "${last_bg[${i}]%%|*}" == "${texts[varunset]}" ]] && echo false || echo true)" "${icons[displaybg]}" "true")\n"
    actions+=( "set_backgrounds ${i}" )
    error_msgs+=("")

    entries+="$(write_menuentry "${texts[save]^} ${texts[settings]}" "$(is_saved ${i})" "${icons[save]}" "true")\n"
    actions+=( "save_settings ${i}" )
    error_msgs+=("")
    fi

    header="${texts[availiable]} ${texts[options]} ${display}"
    theme="./common/themes/vertical_menu.rasi"
    
    handle_rofi
    return $?
}

declare -a last_bg

outputs="$(${SWAYMSG} -r -t get_outputs)"
IFS=$NF read -d '\0' -r -a displays <<< "$(${JQ} '.[] | [.name, .make, .model, .serial] | join(" ")' <<< ${outputs})"
IFS=$NF read -d '\0' -r -a curr_modes <<< "$(${JQ} '.[] | .current_mode | [.width, "x" ,.height, "@", .refresh] | join("")' <<< ${outputs})"
IFS=$NF read -d '\0' -r -a positions <<< "$(${JQ} '.[] | .rect | [.x, .y] | join(", ")' <<< ${outputs})"
IFS=$NF read -d '\0' -r -a scales <<< "$(${JQ} '.[] | .scale' <<< ${outputs})"
IFS=$NF read -d '\0' -r -a transforms <<< "$(${JQ} '.[] | .transform' <<< ${outputs})"
IFS=$NF read -d '\0' -r -a adsyncs <<< "$(${JQ} '.[] | .adaptive_sync_status' <<< ${outputs})"
IFS=$NF read -d '\0' -r -a hintings <<< "$(${JQ} '.[] | .subpixel_hinting' <<< ${outputs})"
IFS=$NF read -d '\0' -r -a enabled <<< "$(${JQ} '.[] | .active' <<< ${outputs})"
#IFS=$NF read -d '\0' -a hdrs <<< not implemented yet <<< ${outputs})"

[ ${#displays[@]} -eq 0 ] && die -1 "${texts[nodisplays]:-"No displays found"}"

for i in "${!displays[@]}"; do
    link_name="$(${FIND} "${HOME}/.local/state" -type l -name "lastbg_${displays[i]#* }_*" | tail -n1 )"
    link_name="${link_name:-"${HOME}/.local/state/lastbg_${displays[i]#* }_tile_111130"}"
    color="$(cut -d'_' -f 4 <<< "${link_name}")"
    infill="$(cut -d'_' -f 3 <<< "${link_name}")"
    file_name="$(readlink -q -n "${link_name}" 2>/dev/null || echo -e "${texts[varunset]}")|${infill}|${color}"
    last_bg+=( "${file_name/${HOME}\//\~/}" )
    #warn "link: ${link_name} bg: ${last_bg[i]} infill: ${infill} color: ${color}"
    entries+="$(write_menuentry "${displays[i]}" "${enabled[i]}" "${icons[${displays[i]%%-*}]}")\n"
    actions+=( "set_display ${i}" )
    confirm+=( false )
    nocatch+=( false )
    error_msgs+=( "" )
done

handle_rofi

