#!/usr/bin/env sh
ORIGIN="$(readlink -q "${BASH_SOURCE[0]}" || echo -e "${BASH_SOURCE[0]}" )"
cd "${ORIGIN%/*}"
source "./common/definitions"
prog="${0##*/}"
args=$*
usage="${texts[usage]}: ${prog} [${texts[options]}]

    ${texts[sway_display_usage]}
    ${common_usage}
"
# parse options

handle_script_opts "$@"
rofiargs="${default_rofiargs} -no-custom -format i "
#default_themestr+="element-text { tab-stops: [8em, 9em, 10.1em]; } "
header="${texts[header_sway_display]}"
theme="./common/themes/vertical_menu.rasi"

SWAYMSG="/usr/bin/swaymsg"
FIND="/usr/bin/gfind"
JQ="/usr/bin/jq --unbuffered -r"

WPSRCDIR="${HOME}/Wallpapers"
#TEMP_BG="/tmp/background.bmp"

declare -A switch power
switch[enabled]="off"
switch[disabled]="on"
power[true]="off"
power[false]="on"

set_mode() {
    local index="${1?${texts[missingarg]:-"Missing argument index"}}"
    local display="${displays[index]}"
    entries=""; actions=(); error_msgs=(); confirm=();
    IFS=$NF read -r -d '' -a modes <<< "$($JQ '.[] | .modes[] |  [.width, "x", .height, "@", .refresh] | join("")' <<< ${outputs})"
    for i in "${!modes[@]}"; do
        enabled=$([[ "${curr_modes[index]}" == "${modes[i]}" ]] && echo true || echo false )
        entries+="$(write_menuentry "${modes[i]:0:-3}.${modes[i]: -3}Hz" "${icons[${enabled}]}")\n"
        actions+=( "${SWAYMSG} output \"${display#* }\" mode ${modes[$i]:0:-3}.${modes[$i]: -3}Hz" )
        error_msgs+=( "${texts[cantsetdisplay]} ${texts[displaymode]}" )
    done
    header="${texts[header_sway_display_modes]:-"Availiable display modes"}"
    theme="./common/themes/vertical_menu.rasi"
    handle_rofi
    return $?
}

set_position() {
    local rofi_ret pos
    local index="${1?${texts[missingarg]:-"Missing argument index"}}"
    local display="${displays[index]}"
    local curr_pos="${positions[index]%%,*}, ${positions[index]##*, }"
    pos=$(./urd-prompt -n "${texts[header_sway_display_position]:-"Enter display position coordinates"} (${curr_pos})" -p "${texts[displayposition]^}" )
    rofi_ret="$?"
    test ${rofi_ret} -eq 0 && run_menuentry_action "swaymsg output \"${display#* }\" position ${pos}" "${texts[cantsetdisplay]} ${texts[position]}"
    return $?
}

set_scale() {
    local rofi_ret scale
    local index="${1?${texts[missingarg]:-"Missing argument index"}}"
    local display="${displays[index]}"
    local curr_scale="${scales[index]}"
    scale="$(./urd-prompt -n "${texts[header_sway_display_scale]:-"Enter display scale multiplier"}" -p "${texts[displayscale]^}" )"
    rofi_ret="$?"
    test ${rofi_ret} -eq 0 && run_menuentry_action "swaymsg output \"${display#* }\" scale ${scale}" "${texts[cantsetdisplay]} ${texts[scale]}"
    return $?
}

set_transform() {
    local index="${1?${texts[missingarg]:-"Missing argument index"}}"
    local display="${displays[index]}"
    local curr_trans="${transforms[index]}"
    declare -a trans
    entries=""; actions=(); error_msgs=(); confirm=();
    trans=("normal" "flipped" "90" "180" "270" "flipped-90" "flipped-180" "flipped-270")
    for i in "${!trans[@]}"; do
        enabled=$([[ "${curr_trans}" == "${trans[i]}" ]] && echo true || echo false )
        entries+="$(write_menuentry "${texts[displaytransform_${trans[$i]}]}" "${icons[${enabled}]}")\n"
        actions+=( "${SWAYMSG} output \"${display#* }\" transform ${trans[i]}" )
        error_msgs+=( "${texts[cantsetdisplay]} ${texts[transform]}" )
    done
    header="${texts[header_sway_display_transform]:-"Availiable display transforms"}"
    theme="./common/themes/vertical_menu.rasi"

    handle_rofi
    return $?
}

set_hinting() {
    local index="${1?${texts[missingarg]:-"Missing argument index"}}"
    local display="${displays[index]}"
    local curr_hint="${hintings[index]}"
    entries=""; actions=(); error_msgs=(); confirm=();
    declare -a hints
    local hints=("rgb" "bgr" "vrgb" "vbgr" "none")
    for i in "${!hints[@]}"; do
        enabled=$([[ "${curr_hint}" == "${hints[i]}" ]] && echo true || echo false )
        entries+="$(write_menuentry "${texts[${hints[i]}]}" "${icons[${enabled}]}")\n"
        actions+=( "${SWAYMSG} output \"${display#* }\" subpixel ${hints[$i]}" )
        error_msgs+=( "${texts[cantsetdisplay]} ${texts[hinting]}" )
    done
    header="${texts[header_sway_display_subpixel]:-"Availiable display subpixel hinting"}"
    theme="./common/themes/vertical_menu.rasi"
    
    handle_rofi
    return $?
}

change_bg() {
    local index="${1?${texts[missingarg]:-"Missing argument index"}}"
    shift 1
    local bg="${@?${texts[missingarg]:-"Missing argument bg"}}"
    local display="${displays[index]}"
    ln -snf "${bg}" ${HOME}/.local/state/lastbg 
    ${SWAYMSG} output \"${display#* }\" bg "${bg}" stretch
    return $?
}

set_bg() {
    local index="${1?${texts[missingarg]:-"Missing argument index"}}"
    shift 1
    local curr_bg="${@?${texts[missingarg]:-"Missing argument curr_bg"}}"
    local display="${displays[index]}"
    local curr_mode="${curr_modes[index]}"
    entries=""; actions=(); error_msgs=(); confirm=();
    declare -a bgs
    IFS=$NF read -d '' -a bgs <<< "$(${FIND} ${WPSRCDIR/#~/$HOME} -type f -iname \*\.jpg -iname \*\.jpeg -iname \*\.bmp -o -iname \*\.png -o -iname \*\.webp)"
    for f in "${bgs[@]}"; do
        saved="$([[ " ${f} " =~ " ${curr_bg} " ]] && echo -e "${icons[confirmed]}" )"
        entries+="$(write_menuentry "${f##*/} ${saved}" "${f}")\n"
        actions+=( "change_bg ${i} ${f}" )
        error_msgs+=( "${texts[cantsetdisplay]} ${texts[background]}" )
    done
    header="${texts[header_sway_display_backgrounds]:-"Availiable display backgrounds"}"
    theme="./common/themes/vertical_menu.rasi"
    handle_rofi
    return $?
}

set_display() {
    local i="${1?${texts[missingarg]:-"Missing argument index"}}"
    local display="${displays[i]}"
    entries=""; actions=(); error_msgs=(); confirm=();
    
    entries+="$(write_menuentry "${icons[power]} ${texts[${power[${enabled[$i]}]}]^}" "${icons[${enabled[$i]}]}")\n"
    actions+=("${SWAYMSG} output \"${display#* }\" toggle")
    error_msgs+=("${texts[cantsetdisplay]} ${texts[displayactive]}")
    confirm+=(true)
    entries+="$(write_menuentry "${icons[displaymode]} ${texts[displaymode]^}: ${curr_modes[i]:0:-3},${curr_modes[$i]: -3}")\n"
    actions+=( "set_mode ${i}" )
    error_msgs+=("${texts[cantsetdisplay]} ${texts[displaymode]}")
    entries+="$(write_menuentry "${icons[displayposition]} ${texts[displayposition]^}: ${texts[top]}: ${positions[$i]%%,*}, ${texts[left]}: ${positions[$i]##*, } ")\n"
    actions+=( "set_position ${i}" )
    error_msgs+=("${texts[cantsetdisplay]} ${texts[displayposition]}")
    entries+="$(write_menuentry "${icons[search]} ${texts[displayscale]^}: ${scales[$i]}")\n"
    actions+=( "set_scale ${i}" )
    error_msgs+=("${texts[cantsetdisplay]} ${texts[displayscale]}")
    entries+="$(write_menuentry "${icons[displaytransform]} ${texts[displaytransform]^}: ${texts[displaytransform_${transforms[$i]}]}")\n"
    actions+=( "set_transform ${i}" )
    error_msgs+=( "${texts[cantsetdisplay]} ${texts[displaytransform]}" )
    entries+="$(write_menuentry "${icons[displaysync]} ${texts[adaptive_sync]^}: ${texts[${switch[${adsyncs[$i]}]}]}" "${icons[${adsyncs[$i]}]}")\n"
    actions+=( "${SWAYMSG} output \"${display#* }\" adaptive_sync ${switch[${adsyncs[$i]}]}" )
    error_msgs+=("${texts[cantsetdisplay]} ${texts[adaptive_sync]}")
    entries+="$(write_menuentry "${icons[displayhinting]} ${texts[subpixel_hinting]^}: ${texts[${hintings[$i]}]}")\n"
    actions+=( "set_hinting ${i}" )
    error_msgs+=( "${texts[cantsetdisplay]} ${texts[subpixel_hinting]}" )
    #entries+="$(write_menuentry "<span>${branch[1]}</span> ${texts[render_bit_depth]^}: ${hdrs[i]}")\n"
    #actions+=("swaymsg output ${displays[i]%% *} render_bit_depth ${hdr[${hdrs[i]}]}")
    #error_msgs+=("${texts[cantsetdisplay]} ${texts[render_bit_depth]}")
    entries+="$(write_menuentry "${icons[displaybg]} ${texts[background]^}: ${curr_bg##*/}")\n"
    actions+=( "set_bg ${i} ${curr_bg}" )
    error_msgs+=( "${texts[cantsetdisplay]} ${texts[background]}" )

    header="${texts[header_sway_display_options]:-"Availiable display options"} ${display}"
    theme="./common/themes/vertical_menu.rasi"
    
    handle_rofi
    return $?
}

outputs="$(${SWAYMSG} -r -t get_outputs)"
IFS=$NF read -r -a displays <<< "$(${JQ} '.[] | [.name, .make, .model, .serial] | join(" ")' <<< ${outputs})"
IFS=$NF read -r -a curr_modes <<< "$(${JQ} '.[] | .current_mode | [.width, "x" ,.height, "@", .refresh] | join("")' <<< ${outputs})"
IFS=$NF read -r -a positions <<< "$(${JQ} '.[] | .rect | [.x, .y] | join(", ")' <<< ${outputs})"
IFS=$NF read -r -a scales <<< "$(${JQ} '.[] | .scale' <<< ${outputs})"
IFS=$NF read -r -a transforms <<< "$(${JQ} '.[] | .transform' <<< ${outputs})"
IFS=$NF read -r -a adsyncs <<< "$(${JQ} '.[] | .adaptive_sync_status' <<< ${outputs})"
IFS=$NF read -r -a hintings <<< "$(${JQ} '.[] | .subpixel_hinting' <<< ${outputs})"
IFS=$NF read -r -a enabled <<< "$(${JQ} '.[] | .active' <<< ${outputs})"
#IFS=$NF read -d '' -a hdrs <<< not implemented yet <<< ${outputs})"
curr_bg="$(readlink ${HOME}/.local/state/lastbg || echo ${texts[varunset]})"

[[ ${#displays[@]} -eq 0 ]] && die "${texts[nodisplays]:-"No displays found"}"

for i in "${!displays[@]}"; do
    #warn "displays: ${displays[i]%% *}"
    entries+="$(write_menuentry "${icons[${displays[i]%%-*}]} ${displays[i]}" "${icons[${enabled[i]}]}")\n"
    actions+=("set_display ${i}")
    error_msgs+=("${texts[cantsetdisplay]}")
done

handle_rofi

