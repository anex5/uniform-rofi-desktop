#!/usr/bin/env bash
ORIGIN="$(readlink -q "${BASH_SOURCE[0]}" || echo -e "${BASH_SOURCE[0]}" )"
cd "${ORIGIN%/*}"
TIMEOUT=2
BTCTL="bluetoothctl"
RDEPS+="${BTCTL},"
source "./common/definitions"
prog="${0##*/}"
args=$*
nprog=${prog//-/_}
usage="${texts[usage]}: ${prog} [$texts[options]]

    ${texts[usage_${nprog##*urd_}]^}
    ${common_usage}
"
# parse options
handle_common_opts "$@"
rofiargs+=" -dmenu"
theme="./common/themes/vertical_menu.rasi"

coproc BT ( ${BTCTL}; )
# Keep file descriptors open
exec 500<&${BT[0]} 600>&${BT[1]}
BTCTL_IN=600
BTCTL_OUT=500

declare -A expect=(
    [power_on]="Changing power on succeeded"
    [power_off]="Changing power off succeeded"
    [scan_on]="Discovery started"
    [scan_off]="Discovery stopped"
    [pairable_on]="Changing pairable on succeeded"
    [pairable_off]="Changing pairable off succeeded"
    [discoverable_on]="Changing discoverable on succeeded"
    [discoverable_off]="Changing discoverable off succeeded"
    [connect]="Connection successful"
    [disconnect]="Successful disconnected"
    [trust]="trust succeeded"
    [untrust]="untrust succeeded"
    [block]="block succeeded"
    [unblock]="unblock succeeded"
    [pair]="Pairing successful"
    [cancel-pairing]=""
    [remove]="Device has been removed"
)

send_btcmd() {
    local device="${1?${texts[missingarg]:-Missing argument} device}"; shift
    local cmd="${*?${texts[missingarg]:-Missing argument} cmd}"
    local output=""

    echo -e "select ${device}" >&${BTCTL_IN}
    sleep 1
    echo -e "${cmd}" >&${BTCTL_IN}
    #sleep 1
    IFS= read -t ${TIMEOUT} -r -d '' -u ${BTCTL_OUT} output

    #send_notification "${output}"
    if [[ "${output}" =~ "${expect[${cmd}]}" ]]; then 
        return 0
    else
        return -1
    fi
}

bt_pair(){
    # TODO : Add possibility to enter passkey if required
    local device="${1?${texts[missingarg]:-Missing argument} device}"; shift
    local pair="${@?${texts[missingarg]:-Missing argument} pair}"
    local btctlpairinfo="$(send_btcmd "${device}" "${pair}")"
    #local passkey="$( ${GREP} -q "Confirm passkey" <<< "${btctlpairinfo}" && echo "11111" || echo "00000" )"
    #if [ -n ${passkey} ]; then res=$(./urd-confirm -n "${texts[confirmbtpair]:-"Confirm pairing device passkey:"}" "${passkey}")
    #[[ ${res}=="1" ]] && 
}

set_device(){
    local index="${1?${texts[missingarg]:-Missing argument} index}"
    local device="${2?${texts[missingarg]:-Missing argument} device}"
    local curr_powered="$( ${GREP} -q "Powered: yes" <<< "${bdinfo[${index}]}" && echo "on" || echo "off" )"
    local curr_pairable="$( ${GREP} -q "Pairable: yes" <<< "${bdinfo[${index}]}" && echo "on" || echo "off" )"
    local curr_discoverable="$( ${GREP} -q "Discoverable: yes" <<< "${bdinfo[${index}]}" && echo "on" || echo "off" )"
    local curr_scanning="$( ${GREP} -q "Discovering: yes" <<< "${bdinfo[${index}]}" && echo "on" || echo "off" )"

    entries="$(write_menuentry "${texts[power]^}" \
        "catch_posix retcode error_msg send_btcmd ${device} power ${toggle[${curr_powered}]}" \
        "${icons[power]}" "${bool[${curr_powered}]}" "true" "false" "false" \
        "${texts[cantset]} ${texts[bluetooth]} ${texts[power]}" \
    )"
    entries+="$(write_menuentry "${texts[btscan]^}" \
        "catch_posix retcode error_msg send_btcmd ${device} scan ${toggle[${curr_scanning}]}" \
        "${icons[search]}" "${bool[${curr_scanning}]}" "true" "false" "false" \
        "${texts[cantset]} ${texts[bluetooth]} ${texts[btscan]}" \
    )"
    entries+="$(write_menuentry "${texts[discoverable]^}" \
        "catch_posix retcode error_msg send_btcmd ${device} discoverable ${toggle[${curr_discoverable}]}" \
        "${icons[discoverable]}" "${bool[${curr_discoverable}]}" "true" "false" "false" \
        "${texts[cantset]} ${texts[bluetooth]} ${texts[discoverable]}" \
    )"
    entries+="$(write_menuentry "${texts[pairable]^}" \
        "catch_posix retcode error_msg send_btcmd ${device} pairable ${toggle[${curr_pairable}]}" \
        "${icons[pairable]}" "${bool[${curr_pairable}]}" "true" "false" "false" \
        "${texts[cantset]} ${texts[bluetooth]} ${texts[pairable]}" \
    )"

    header="${texts[deviceoptions]^} ${device}"
    handle_rofi
    return $?
}

set_client(){
    local index="${1?${texts[missingarg]:-Missing argument} index}"
    local device="${2?${texts[missingarg]:-Missing argument} device}"
    local client="${clients[${index}]%% *}"
    local name="$( ${SED} -n "s/Alias: \(.\+\)$/\1/p" <<< "${clientinfo[${index}]}" )"
    #local icon="$( ${SED} -n "s/^.\+Icon: \([A-Za-z-]\+\)$/\1/p" <<< "${clientinfo[${index}]}" )"
    local connected="$( ${GREP} -q "Connected: yes" <<< "${clientinfo[${index}]}" && echo "on" || echo "off" )"
    local bonded="$( ${GREP} -q "Bonded: yes" <<< "${clientinfo[${index}]}" && echo "on" || echo "off" )"
    local trusted="$( ${GREP} -q "Trusted: yes" <<< "${clientinfo[${index}]}" && echo "on" || echo "off" )"
    local blocked="$( ${GREP} -q "Blocked: yes" <<< "${clientinfo[${index}]}" && echo "on" || echo "off" )"
    local paired="$( ${GREP} -q "Paired: yes" <<< "${clientinfo[${index}]}" && echo "on" || echo "off" )"

    declare -A toggle_paired toggle_blocked toggle_trusted toggle_connected
    toggle_paired=( [off]=pair [on]=cancel-pairing )
    toggle_blocked=( [off]=block [on]=unblock )
    toggle_trusted=( [off]=trust [on]=untrust )
    toggle_connected=( [off]=connect [on]=disconnect )

    entries="$(write_menuentry "${texts[${toggle_paired[$paired]}]^}" \
        "catch_posix retcode error_msg bt_pair ${toggle_paired[${paired}]} ${client}" \
        "${icons[link]}" "${bool[${paired}]}" "true" "false" "false" \
        "${texts[cantset]^} ${texts[bluetooth]} ${texts[${toggle_paired[${paired}]}]} ${texts[device]} ${name}" \
    )"
    entries+="$(write_menuentry "${texts[${toggle_connected[$connected]}]^}" \
        "catch_posix retcode error_msg send_btcmd ${device} ${toggle_connected[${connected}]} ${client}" \
        "${icons[btconnect]}" "${bool[${connected}]}" "true" "false" "false" \
        "${texts[cantset]^} ${texts[bluetooth]} ${texts[${toggle_connected[${connected}]}]} ${texts[device]} ${name}" \
    )"
    entries+="$(write_menuentry "${texts[${toggle_trusted[$trusted]}]^}" \
        "catch_posix retcode error_msg send_btcmd ${device} ${toggle_trusted[$trusted]} ${client}" \
        "${icons[trust]}" "${bool[${trusted}]}" "true" "false" "false" \
        "${texts[cantset]^} ${texts[bluetooth]} ${texts[${toggle_trusted[${trusted}]}]} ${texts[device]} ${name}" \
    )"
    entries+="$(write_menuentry "${texts[${toggle_blocked[$blocked]}]^}" \
        "catch_posix retcode error_msg send_btcmd ${device} ${toggle_blocked[${blocked}]} ${client}" \
        "${icons[lock]}" "${bool[${blocked}]}" "true" "false" "false" \
        "${texts[cantset]^} ${texts[bluetooth]} ${texts[${toggle_blocked[${blocked}]}]} ${texts[device]} ${name}" \
    )"
    entries+="$(write_menuentry "${texts[remove]^}" \
        "catch_posix retcode error_msg send_btcmd ${device} remove ${client}" \
        "${icons[trash]}" "true" "true" "false" "false" \
        "${texts[cantset]^} ${texts[bluetooth]} ${texts[remove]}]} ${texts[device]} ${name}" \
    )"

    header="${texts[deviceoptions]^} ${name}"
    handle_rofi

    return $?
}

header="${texts[header_bluetooth_connections]^}"
toggle=$([[ "$(rfkill list bluetooth | ${GREP} "Soft blocked" | cut -d ' ' -f 3-)" =~ "yes" ]] && echo "unblock" || echo "block" )
entries="$(write_menuentry "${texts[${toggle}]^} ${texts[bluetooth]} ${texts[capability]}" \
    "rfkill toggle bluetooth" \
    "${icons[BT]}" "${toggle}" "true" "false" "false" \
    "${texts[canttogglebluetooth]}" \
)"

declare -a btctl bdinfo bdclients clientinfo clients

IFS=$NF read -d '' -a btctl <<< "$(ls -A1 /sys/class/bluetooth | ${SED} -n 's/^\(hci[[:digit:]]\+\)$/\1/p' )"
#$(hciconfig -a | sed -une 's/^.\+Manufacturer: \(\w\+\)/\1/p')
#warn "list: ${btctl[@]}"
[[ "${#btctl[@]}" -eq "0" ]] && die -1 "${texts[nobluetoothdevices]}"

for i in ${!btctl[@]}; do
    bdname="$(${SED} -n 's/^\(.\+\)\:v\([0-9A-Z]\+\)[a-z]\([0-9A-Z]\+\)[a-z].*$/get_device_name "\U\1" "\L\2" "\L\3" "\/usr\/share\/hwdata\/\1.ids"\n/ep' /sys/class/bluetooth/${btctl[i]}/device/modalias )"
    #bdmacaddr="$(${SED} -n "s/\(${MACADDR_SEDMASK}\) .\+$/\1/p" /sys/kernel/debug/bluetooth/${btctl[i]}/identity)"}
    busname="${bdname%% *}"
    bdname="${texts[${busname}]} ${bdname#* }"
    bdmacaddr="$(hciconfig -a ${btctl[i]} | ${SED} -n "s/^.\+BD Address: \(${MACADDR_SEDMASK}\) .\+$/\1/p")" 
    bdinfo+=("$(${BTCTL} -- show ${bdmacaddr})")
    bdpowered="$(${GREP} -q "Powered: yes" <<< "${bdinfo[i]}" && echo "on" || echo "off")"
    bdclients="$(${SED} -n "s/Device \(${MACADDR_SEDMASK} .\+\)$/\1/p" <<< "$(echo -en "select ${bdmacaddr}\ndevices\nexit" | ${BTCTL})")"
    clients=(); IFS=$NF read -d '' -a clients <<< "${bdclients}"
    entries+="$(write_menuentry "${bdname}" \
        "set_device ${i} ${bdmacaddr}" "${icons[${busname}]}" "${bool[${bdpowered}]}" "true" \
    )"
    #warn "Clients: ${clients[@]}"
    #warn "bdinfo: ${bdmacaddr} ${bdpowered}"
    for j in "${!clients[@]}"; do
        clientinfo+=( "$(echo -en "select ${bdmacaddr}\ninfo ${clients[j]%% *}\nexit" | ${BTCTL})" )
        connected="$( ${GREP} -q "Connected: yes" <<< "${clientinfo[j]}" && echo "on" || echo "off" )"
        bticon="bt$( ${SED} -n "s/^.\+Icon: \([A-Za-z-]\+\)$/\1/p" <<< "${clientinfo[$j]}" )"
        btbattery="$( ${SED} -n "s/^.\+Battery Percentage: .\+ (\([0-9]\+\))$/\1/p" <<< "${clientinfo[$j]}" )"
        #btrssi="$( ${SED} -n "s/^.\+RSSI: .\+ (\([-0-9]\+\))$/\1/p" <<< "${clientinfo[$j]}" )"
        btbaticon="$( [ -n "${btbattery}" ] && echo -e "${icons["btbat${btbattery:0:-1}0"]}" || echo -e "")"
        entries+="$(write_menuentry "$(get_branch_icon "${#clients[@]}" "${j}")${btbaticon} ${clients[j]}" \
            "set_client ${j} ${bdmacaddr}" "${icons[${bticon}]}" "${bool[${connected}]}" \
        )"
    done
done

handle_rofi

# Close the coprocess
exec {BTCTL_IN}>&-
exec {BTCTL_OUT}<&-

