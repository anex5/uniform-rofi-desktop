#!/usr/bin/env sh
#
# Rofi powered menu to prompt a password.
# Uses: rofi
ORIGIN="$(readlink -q "${BASH_SOURCE[0]}" || echo -e "${BASH_SOURCE[0]}" )"
cd "${ORIGIN%/*}"
source "./common/definitions"
prog="${0##*/}"
args=$*
nprog="${prog//-/_}"
usage="${texts[usage]}: ${prog} [${texts[options]}]

    ${texts[usage_${nprog##*urd_}]^}
    ${common_usage}
"
# parse options
handle_common_opts "$@"

source "./common/langs/${default_lang}"  # sourcing default lang here is urgent for common optional argument -lang=xx_XX
rofiargs="${rofiargs// -keep-selection -use-hot-keys} -keep-selection -use-hot-keys"
header="${texts[header_screen-keyboard]}"
keys="$(readlink -q -n "${HOME}/.local/state/urd-screen-keyboard" 2>/dev/null)"
keys="${keys:-"./common/keyboards/QWERTY_en-US_48.keys"}"
theme="./common/themes/horizontal_keyboard.rasi"

select_keyboard() {
	local current_keyboard="${1?${texts[missingarg]:-Missing argument} current_keyboard}"
	local -i i=0
	local -a keyboards=()
	IFS=$NF read -r -d '' -a keyboards <<< "$(${FIND} common/keyboards -type f -name "*.keys")"
	entries=""
	for i in "${!keyboards[@]}"; do
		# send_notification ${keyboards[i]}
		[[ "${keyboards[i]##*/}" == "${current_keyboard}" ]] && enabled="true" || enabled="false"
		entries+="$(write_menuentry "${keyboards[i]##*/}" "ln -snf ${keyboards[i]} ${HOME}/.local/state/urd-screen-keyboard" \
			"${icons[keyboard]}" "${enabled}" "true" "false" "false" "${texts[cant]} ${texts[select]} ${texts[keyboard]}")"
	done
	header="${texts[select]} ${texts[keyboard]}"
	theme="./common/themes/vertical_menu.rasi"
	rofiargs="${rofiargs// -keep-filter} -keep-filter"
	#rofiargs="${rofiargs// -dmenu} -dmenu"
	handle_rofi
	return $?
}

toggle_caps() {
	local current_keyboard="${1?${texts[missingarg]:-Missing argument} current_keyboard}"
	[[ "${current_keyboard}" =~ ".caps" ]] && \
		keys="./common/keyboards/${current_keyboard%*.caps}" || \
		keys="./common/keyboards/${current_keyboard}.caps"
	ln -snf "${keys}" "${HOME}/.local/state/urd-screen-keyboard" &>/dev/null
	rofiargs="${rofiargs// -keep-filter} -keep-filter"
	set_keyboard
	return $?
}

type_key() {
	local key="-k ${1?${texts[missingarg]:-Missing argument} key}"
	[[ -n "${2}" ]] && local mod="-M ${2} " || local mod=""
	local s=$(wtype ${mod}${key})
	local wtype_ret=$?
	export ROFI_DATA+="${s}"
	rofiargs="${rofiargs// -keep-filter} -keep-filter"
	return $wtype_ret
}

type_string() {
	echo -e "${ROFI_DATA}" >> ~/.local/state/urd-screen-keyboard.history
	rofiargs="${rofiargs// -keep-filter}"
	export ROFI_DATA=''
	# send_notification "${texts[copied]^}: ${ROFI_DATA}"
}

set_keyboard() {
	entries="$(<${keys})"
	rofiargs="${rofiargs// -keep-filter} -keep-filter"
	return $?
}

set_keyboard
handle_rofi

#send_notification "After handle rofi. RETV=${ROFI_RETV}"
if ${force_dmenu} ; then
	case ${ROFI_RETV} in
		0) # Restart after selection
			exec ./${prog} ${args// -arg *} -arg "-f ${chosen}"
		;;
	esac
else
	case ${ROFI_RETV} in
		0) # Restart after selection
			write_script_entries
		;;
		10)
			type_key backspace
			write_script_entries
			ROFI_RETV=0
		;;
	esac
fi
