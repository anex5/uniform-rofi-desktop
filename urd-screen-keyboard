#!/usr/bin/env sh
#
# Rofi powered menu to prompt a password.
# Uses: rofi
ORIGIN="$(readlink -q "${BASH_SOURCE[0]}" || echo -e "${BASH_SOURCE[0]}" )"
cd "${ORIGIN%/*}"
source "./common/definitions"
prog="${0##*/}"
args=$*
nprog="${prog//-/_}"
usage="${texts[usage]}: ${prog} [${texts[options]}]

    ${texts[usage_${nprog##*urd_}]^}
    ${common_usage}
"
# parse options
handle_common_opts "$@"

source "./common/langs/${default_lang}"  # sourcing default lang here is urgent for common optional argument -lang=xx_XX
rofiargs="${rofiargs// -keep-selection} -keep-selection"
header="${texts[header_screen-keyboard]:-Screen keyboard}"
keys="./common/keyboards/QWERTY_en-US_48.keys"
theme="./common/themes/horizontal_keyboard.rasi"

select_keyboard() {
	local current_keyboard="${1?${texts[missingarg]:-Missing argument} current_keyboard}"
	local -i i=0
	local -a keyboards=()
	IFS=$NF read -r -d '' -a keyboards <<< "$(${FIND} common/keyboards -type f -name "*.keys")"
	entries=""
	for i in "${!keyboards[@]}"; do
		# send_notification ${keyboards[i]}
		enabled="$([[ "${keyboards[i]}" == "${current_keyboard}" ]] && echo "true" || echo "false")"
		entries+="$(write_menuentry "${keyboards[i]##*/}" "export keys=\"${keyboards[i]}\"" "${icons[keyboard]}" "${enabled}" "true")"
	done
	header="${texts[select]} ${texts[keyboard]}"
	theme="./common/themes/vertical_menu.rasi"
	handle_rofi
	return $?
}

toggle_caps() {
	local current_keyboard="${1?${texts[missingarg]:-Missing argument} current_keyboard}"
	local caps="$([[ "${current_keyboard}" =~ ".caps" ]] && echo "" || echo ".caps")"
	export keys="${current_keyboard}${caps}"
	return $?
}

type_key() {
	local key="${1:-" "}"
	export ROFI_DATA+="${key}"
	wtype -k "${key// /space}"
	rofiargs="${rofiargs// -keep-filter} -keep-filter"
}

type_string() {
	echo -e "${ROFI_DATA}" 1>&2
	rofiargs="${rofiargs// -keep-filter}"
	ROFI_DATA=''
	export ROFI_DATA
	# send_notification "${texts[copied]^}: ${ROFI_DATA}"
}

entries="$(<${keys})"

handle_rofi

#send_notification "After handle rofi. RETV=${ROFI_RETV}"
if ${force_dmenu} ; then
	case ${ROFI_RETV} in
		0) # Restart after selection
			exec ./${prog} ${args// -arg *} -arg "-f ${chosen}"
		;;
	esac
else
	case ${ROFI_RETV} in
		0) # Restart after selection
			write_script_entries
		;;
	esac
fi
