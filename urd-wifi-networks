#!/usr/bin/env bash
ORIGIN="$(readlink -q "${BASH_SOURCE[0]}" || echo -e "${BASH_SOURCE[0]}" )"
cd "${ORIGIN%/*}"
source "./common/definitions"
prog="${0##*/}"
args=$*
nprog=${prog//-/_}
usage="${texts[usage]}: ${prog} [${texts[options]}]

    ${texts[usage_${nprog##*urd_}]^}
    ${common_usage}
"

# parse options
handle_common_opts "$@"
rofiargs+="${rofiargs// -dmenu} -dmenu"
default_themestr+="element-text { tab-stops: [10em, 13em]; } "
header="${texts[header_wifi_networks]}"
theme="./common/themes/vertical_menu.rasi"

FIELDS="NAME,SSID,MODE,CHAN,FREQ,RATE,SIGNAL,BARS,SECURITY,WPA-FLAGS,RSN-FLAGS,IN-USE,BSSID"
TIMEOUT=1
export TERM=""
NMCLI="nmcli -w ${TIMEOUT} -c no -e no -t -m tabular"

declare -A act
act[connect]="wifi_connect"
act[disconnect]="wifi_disconnect"

parse_entry(){
    local entry="${@?${texts[missingarg]:-Missing argument} entry}"
    #bssid="$(${SED} -n 's/^.*Address: \([[:xdigit:]:]\{11,17\}\).*/\1/p' <<< "${entry}")"
    #ssid="$(${SED} -n 's/^.*ESSID:"\(.*\)".*/\1/p' <<< "${entry}")"
    #freq="$(${SED} -n 's/^.*Frequency:\([0-9.]\+\) .*/\1/p' <<< "${entry}")"
    #rate="$(${SED} -n 's/^.*Bit Rates:\([0-9]\+\) .*/\1/p' <<< "${entry}")"
    #signal="$(${SED} -n 's/^.*Signal level=\([0-9]\+\)\/.*/\1/p' <<< "${entry}")"
    #quality="$(${SED} -n 's/^.*Quality=\([0-9]\+\)\/.*/\1/p' <<< "${entry}")"
    #security="$(${SED} -n 's/^.*\(WPA[0-9]*\).*/\1/p' <<< "${entry}")"

    #bars="$s    "
    #test ${quality} -gt 12 && bars="$s*   "
    #test ${quality} -gt 37 && bars="$s**  "
    #test ${quality} -gt 62 && bars="$s*** "
    #test ${quality} -gt 87 && bars="$s****"
    IFS=':' read -r -d '' name ssid mode chan freq rate signal bars security wpa_flags rsn_flags in_use bssid <<< "${entry}"
    local s=""
    [[ " ${savedcons[*]} " =~ " ${ssid} " ]] && s="o" || s="l"
    [[ "${security}" == "" ]] && s=""
    bssid="${bssid%*$NF}"
    bars="${s}${bars}"
    return $?
}

wifi_connect(){
    local ssid="${1?${texts[missingarg]:-Missing argument} ssid}"
    local cname="${ssid:-${2//:/}}"
    if [[ " ${savedcons[*]} " =~ " ${cname} " ]]; then
        ${NMCLI} con up "${cname}" && send_notification "${texts[connected]^}: ${cname}"
    elif [[ "${3}" == "WEP" || "${3}" == "WPA2" || "${3}" == "WPA1" ]]; then
        [ -z "${ssid}" ] && ssid=$(./urd-prompt -p "${texts[ssidprompt]:-"Enter SSID"}" -n "${texts[ssidhint]:-"SSID name"}" )
        password=$(./urd-prompt -a "-password" -p "${texts[pskprompt]:-"Enter PSK"}" -n "${texts[pskhint]:-"Key phrase for"} ${ssid}" )
        ${NMCLI} dev wifi connect "${ssid}" password "${password}" name "${cname}" && send_notification "${texts[connected]^}: ${cname}"
    else
        ${NMCLI} dev wifi connect "${ssid}" && send_notification "${texts[connected]^}: ${ssid}"
    fi
    return $?
}

wifi_disconnect(){
    local ssid="${1?${texts[missingarg]:-Missing argument} ssid}"
    local cname=${ssid:-"${2//:/}"}
    ${NMCLI} con down "${cname}" && send_notification "${texts[disconnected]^}: ${cname}"
    return $?
}

is_wlan_up() {
    local ifname=${1?${texts[missingarg]:-Missing argument} ifname}
    [[ "$(ip link show dev ${ifname} | ${SED} -n 's/^.*\<.*\(UP\)\>.*$/\1/p')" == "UP" ]]
    return $?
}

toggle_wlan() {
    local ifname="${1?${texts[missingarg]:-Missing argument} ifname}"
    if is_wlan_up "${ifname}"; then
        ip link set dev "${ifname}" down && send_notification "${texts[wlanisdown]}: ${ifname}"
    else
        ip link set dev "${ifname}" up && send_notification "${texts[wlanisup]}: ${ifname}"
    fi
    return $?
}

declare -a wlan savedcons
declare bssid ssid security freq rate signal bars quality

toggle=$([[ "$(rfkill list wifi | ${GREP} "Soft blocked" | cut -d ' ' -f 3-)" =~ "yes" ]] && echo "unblock" || echo "block" )
entries="$(write_menuentry "${texts[${toggle}]^} ${texts[wifi]} ${texts[capability]}" "rfkill toggle wifi" \
    "${icons[WiFi]}" "${bool[${toggle}]}" "true" "false" "false" "false" "${texts[cant]} ${texts[togglewifi]}" \
)"

IFS=$NF read -r -d '' -a wlan <<< "$(ls -A1 /sys/class/net | ${SED} -n 's/^\(wl.*\)/\1/p' )"
IFS=$NF read -r -d '' -a savedcons <<< "$(${NMCLI} -f NAME,TYPE con | ${SED} -n 's/^\(.\+\):802-11-wireless/\1/p' )"
[[ ${#wlan[@]} -eq 0 ]] && die -1 "${texts[nowifidevice]}"

for i in ${!wlan[@]}; do
    #curr_bssid=$(iw dev ${wlan[i]} scan dump -u | ${SED} -n 's/^BSS \([[:xdigit:]:]\{11,17\}\).* -- associated/\1/p' )
    #iwlist_output="$(iwlist ${wlan[i]} scanning | ${SED} -nz 's/\n /|/g;s/[[:space:]]\+/ /g;s/wlp.\+ Scan completed ://;s/| Cell [0-9]\+ - /\n| /gp')"
    nmcli_bss_list="$(${NMCLI} -f ${FIELDS} device wifi list ifname ${wlan[i]} --rescan auto)"
    bss_list=(); IFS=$NF read -r -d '' -a bss_list <<< "${nmcli_bss_list}"
    devname="$(${SED} -n 's/^\(.\+\):v\([0-9A-Z]\+\)[a-z]\([0-9A-Z]\+\)[a-z].*$/get_device_name "\U\1" \"\L\2\" \"\L\3\" \"\/usr\/share\/hwdata\/\1.ids\"\n/ep' /sys/class/net/${wlan[i]}/device/modalias )"
    busname="${devname%% *}"
    devname="${texts[${busname}]} ${devname#* }"
    up="$(is_wlan_up ${wlan[i]} && echo true || echo false)"
    entries+="$(write_menuentry "${devname}" "toggle_wlan ${wlan[i]}" "${icons[${busname}]}" \
        "${up}" "true" "false" "false" "${texts[cant]} ${texts[togglewlan]}" \
    )"
    for j in "${!bss_list[@]}"; do
        parse_entry "${bss_list[j]}"
        #warn "$bssid ${curr_bssid^} $ssid $freq $rate $signal $quality $bars $security"
        connected="$([[ "${in_use}" == "*" ]] && echo disconnect || echo connect )"
        #connected="$([[ "${curr_bssid^^}" == "${bssid}" ]] && echo disconnect || echo connect)"
        cname="${ssid:-"${bssid}"}"
        saved="$([[ " ${savedcons[*]} " =~ " ${cname} " ]] && echo -e "${icons[confirmed]}" )"
        entries+="$(write_menuentry "$(get_branch_icon "${#bss_list[@]}" "${j}") ${cname} ${saved} \
\t<tt>${icons[wifi${freq:0:1}]}<span variant='all-small-caps' rise='1pt'>${rate}</span></tt>" \
            "${act[$connected]} ${ssid} ${bssid} ${security}" \
            "${icons[${bars}]}" "${bool[${connected}]}" "false" "false" "false" \
            "${texts[cant${connected}]}" \
        )"
    done
done

handle_rofi

