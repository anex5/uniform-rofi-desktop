#!/usr/bin/env bash
# common auxiliary functions and definitions

shopt -s extglob
set +x
dryrun=false
force_dmenu=false
default_icons="nf-icons"
default_rofiargs="-pid /run/user/$(id -u)/rofi.pid -replace -markup -markup-rows -keep-left -async-pre-read 0 -dmenu"
default_spanattrs="font_features='dlig=0, -kern, afrc on'"
default_themestr=""
default_lang="ru_RU"
active=""
urgent=""
header=""
theme=""
nbsp=$'\302\240'
source ./common/langs/$default_lang
source ./common/icons/$default_icons

# Check version of bash for variable indirection
case $BASH_VERSION in ''|[123].*|4.[012]) die 1 "Bash 4.3+ needed" ; esac

ROFI="/usr/bin/rofi ${default_rofiargs}"
SED="/bin/sed -u"
GREP="/bin/grep --color=never"
RDEPS="${ROFI},${SED},${GREP}"

MACADDR_SEDMASK="[[:xdigit:]:]\{11,17\}"
SPANATTRS="${default_spanattrs}"
NF='
'

declare -A script_opts
script_opts=(
    [p]=prompt
    [mesg]=message
    [markup-rows]=markup-rows
    [u]=urgent
    [a]=active
    [sep]=delim
    [no-custom]=no-custom
    [use-hot-keys]=use-hot-keys
)

declare -A anchors
anchors=(
	[northwest]=southeast [north]=south   [northeast]=southwest
	[west]=east           [center]=center [east]=west
	[southwest]=northeast [south]=north   [southeast]=northwest
	[top]=northeast [bottom]=southeast
)

declare -A xoffsets
xoffsets=(
    [northwest]="1" [north]="0" [northeast]="-1"
	[west]="1" [center]="0" [east]="-1"
	[southwest]="1" [south]="0" [southeast]="-1"
)

declare -A yoffsets
yoffsets=(
	[northwest]="1" [north]="1" [northeast]="1"
	[west]="0" [center]="0" [east]="0"
	[southwest]="-1" [south]="-1" [southeast]="-1"
)

declare -a actions error_msgs confirm

handle_script_opts() {
    while [ "$#" -ge 1 ]; do
        case "${1}" in
            -i|--no-icons) 
                unset icons
                rofiargs+=" -no-show-icons"
                default_themestr+=" configuration { show-icons: false; }" 
            ;;
            -l|--lang) 
                if [ -f "./common/langs/${2?${texts[missingarg]:-Missing argument} --lang}" ]; then
                    unset texts
                    common_usage=''
                    default_lang="${2}"
                    source ./common/langs/"${2}" || die 1 "${texts[nofile]:-"No such file "} ./common/langs/$2"
                fi
                shift
  	        ;;
            -f|--filter) 
                default_themestr+=" inputbar { enabled: true; } configuration { kb-clear-line: \"\"; }"
            ;;
            -a|--args)
                while read -d' ' -r arg; do default_rofiargs+=" ${arg}"; done <<< "${2?${texts[missingarg]:-Missing argument}} " || die 1 "Argument required to pass it to rofi."
                shift
            ;;
	        -m|--monitor) 
	            if [[ "${!anchors[@]}" != *${2?${texts[missingarg]:-Missing argument} --monitor}* ]]; then
		            warn "Invalid position: ${2}"
		            die 1 "Try e.g. 'northwest' or 'center' instead"
	            fi
	            rofiargs+=" -m -3"
	            default_themestr+=" window { anchor: ${anchors[${2}]}; location: center; } "
	            shift
	        ;;
	        -w|--window)
	            if [[ "${!anchors[@]}" != *${2?${texts[missingarg]:-Missing argument} --window}* ]]; then
		            warn "Invalid position: ${2}"
		            die 1 "Try e.g. 'northwest' or 'center' instead"
	            fi
	            rofiargs+=" -m -2"
	            default_themestr+=" window { anchor: ${2}; location: ${2}; x-offset: ${xoffsets[${2}]}em; y-offset: ${yoffsets[${2}]}em; } "
	            shift
	        ;;
	        --) shift; break ;;
	        -h|--help) 
	            die 0 "$usage"
	        ;;
	        -*) 
	            die "Unknown option $1 ${usage}"
	        ;;
        esac
        shift
	done
}

handle_rofi() {
    [[ "${default_rofiargs}" =~ "-dmenu" ]] && force_dmenu=true
    
    if ${force_dmenu}; then
        [[ -n "${active}" ]] && rofiargs+="-a ${active} -selected-row ${active}"
        [[ -n "${urgent}" ]] && rofiargs+="-u ${urgent}"

        chosen_row=$(echo -en "${entries%%\\n}" | ${ROFI} ${rofiargs} -mesg "${header^}" -theme-str "@import \"${theme}\"" -theme-str "${default_themestr}" )
        rofi_ret=$?
        case "${rofi_ret}" in
        "0") # Entry chosen
            if [ ${#actions[@]} -gt 0 -a -n "${actions[$chosen_row]}" ]; then
                if [ ${#confirm[@]} -gt 0 -a "${confirm[$chosen_row]}" == "true" ]; then
                    ./urd-confirm && run_menuentry_action "${actions[$chosen_row]}" "${error_msgs[$chosen_row]}"
                else
                    run_menuentry_action "${actions[$chosen_row]}" "${error_msgs[$chosen_row]}"
                fi
            else
                die 1 "${texts[failed]:-"Failed"}: ${texts[varunset]:-"Variable unset"} actions[$chosen_row]"
            fi
        ;;
        "1") # Cancelled by user
            die 0 "${texts[canceled]:-"Cancelled..."}"
        ;;
        "1[0-9]"|"2[0-8]") # run new instance on custom key
	        ./${prog} ${args}
        ;;
        "*")  die ${rofi_ret} "${texts[error]:-"Error: "} ${rofi_ret}"
        ;;
        esac
    else
        #warn "direct"
        get_script_opts "${rofiargs}"
	    [[ -n "${prompt}" ]] && echo -e "\x00prompt\x1f<span $SPANATTRS>${prompt^}</span>"
        [[ -n "${header}" ]] && echo -e "\x00message\x1f<span $SPANATTRS>${header^}</span>"
        [[ -n "${active}" ]] && ( echo -e "\x00active\x1f${active}"; rofiargs+="-selected-row ${active}" )
        [[ -n "${urgent}" ]] && echo -e "\x00urgent\x1f${urgent}"
        #warn "${entries}"
        rofi_ret="$(${ROFI} ${rofiargs} -modi "urd:./${prog} ${args}" -show urd -theme-str "@import \"${theme}\"" -theme-str "${default_themestr}" )"

        case "${ROFI_RETV}" in
        #"") # script called directly
        #    ${ROFI} ${rofiargs} -modi "urd:./${prog} ${args}" -show urd
        #;;
        "0") # rofi: initial call of script
  	        echo -en "${entries}"
        ;;
        "1") # rofi: selected an entry
            if [ ${#actions[@]} -gt 0 -a -n "${actions[$chosen_row]}" ]; then
                if [ ${#confirm[@]} -gt 0 -a -n "${confirm[$chosen_row]}" ]; then
                    ./urd-confirm && run_menuentry_action "${actions[$chosen_row]}" "${error_msgs[$chosen_row]}"
                else
                    run_menuentry_action "${actions[$chosen_row]}" "${error_msgs[$chosen_row]}"
                fi
            else
                die 1 "${texts[failed]:-"Failed"}: ${texts[varunset]:-"Variable unset"} actions[$chosen_row]"
            fi

		    #warn "Selected entry... $1"
        ;;
        "2") # rofi: selected custom entry
            warn "Selected custom-entry..."
        ;;
        "*") # rofi: selected unknown entry
	        die "Unknown entry selected (this is a bug): $1"
        ;;
        esac
    fi
}

# write message to stdout
warn() {
	[[ -n ${@} ]] && local message="${@}"
	printf "%s\n" "${message}"
}

# write error and exit
die() {
	[[ "${1}" =~ ^[-0-9]+$ ]] && local retval=${1} && shift
    local msg="$@"
	[[ ${retval} -gt 0 ]] && send_notification "${texts[programtermination]:-program termination}" "${msg^}"
	warn "${msg^}"
	exit ${retval}
}

toggle() {
    [[ "${1}" == "on" ]] && echo "off" || echo "on"
}

check_runtime_deps() {
    while read -d',' DEP; do
        command -v ${DEP} >/dev/null 2>&1 || die 1 "${texts[missingruntimedep]:-"Missing runtime dependency"} ${DEP}"
    done <<< "${1?${texts[missingarg]:-Missing argument}}"
}

get_device_name(){
    local BUS=${1?${texts[missingarg]:-"Missing argument BUS"}}
    local VID=${2?${texts[missingarg]:-"Missing argument VID"}}
    local DEV=${3?${texts[missingarg]:-"Missing argument DEV"}}
    local IDS=${4?${texts[missingarg]:-"Missing argument IDS file"}}
    vendor="$(/bin/sed -un 's/^'${VID}'  \(.\+\).*$/\1/p' ${IDS})"
    name="$(/bin/sed -un '/^'${VID}'/,/^\t'${DEV}'/{ s/^\t'${DEV}'  \(.\+\)$/\1/p; }' ${IDS})"
    echo -ne "${BUS} ${name} ${vendor}"
    return $?
}
export -f get_device_name

get_branch_icon(){
    # $1 -- array length
    # $2 -- current index (count from 0)
    echo "<span>${branch[$([ "${1}" -eq "$((${2}+1))" ] && echo 1 || echo 0)]}</span>"
}

write_menuentry() {
    # Creates listview element menuentry for rofi
    # $1 - text
    # $2 - icon
    # $3 - meta
    # $4 - nonselectable
    # $5 - info
    local code="00"
    [[ -n "${1}" ]] && echo -n "<span ${SPANATTRS}>&#x2068;${1^}&#x2069;</span>"
    [[ -n "${2}" ]] && echo -n "\x${code}icon\x1f${2}" && code="1f"
    [[ -n "${3}" ]] && echo -n "\x${code}meta\x1f${3}" && code="1f"
    [[ -n "${4}" ]] && echo -n "\x${code}nonselectable\x1f${4}" && code="1f"
    [[ -n "${5}" ]] && echo -n "\x${code}info\x1f${5}"
}

_CTRL_Z_=$'\cZ'
#     catch_posix STDOUT_VARIABLE STDERR_VARIABLE COMMAND
catch_posix() {
    {
        IFS=$NF"${_CTRL_Z_}" read -r -d "${_CTRL_Z_}" "${1}";
        IFS=$NF"${_CTRL_Z_}" read -r -d "${_CTRL_Z_}" "${2}";
        ( IFS=$NF"${_CTRL_Z_}" read -r -d "${_CTRL_Z_}" _ERRNO_; return ${_ERRNO_}; )
    } <<EOF
$( (printf "${_CTRL_Z_}%s${_CTRL_Z_}%d${_CTRL_Z_}" "$( ( ( ({ shift 2; "${@}"; echo "${?}" 1>&3-; } | cut -z -d"${_CTRL_Z_}" -f1 | tr -d '\0' 1>&4-) 4>&2- 2>&1- | cut -z -d"${_CTRL_Z_}" -f1 | tr -d '\0' 1>&4-) 3>&1- | exit "$(cat)") 4>&1-)" "${?}" 1>&2) 2>&1)
EOF
}

run_menuentry_action() {
    [[ -n "${1}" ]] && local action="${1}" || return 1
    [[ -n "${2}" ]] && local error_msg="${2}"
    local catch_output="" 
    local catch_error=""
    local retcode=1
    if ${dryrun}; then
        warn "Dry run: ${action}"
        warn "error msg: ${error_msg}"
        send_notification "Dry run:" "${action} ${error_msg^}"
    else
        catch_posix catch_output catch_error ${action}
        retcode=$?
        [ ${retcode} -lt 0 ] && send_notification "${error_msg}" "${catch_error}"
        #warn "Action retcode: ${retcode}, Action: ${action}, Output: ${catch_output}, Error: ${catch_error}, Error msg: ${error_msg}"
    fi
    return ${retcode}
}

send_notification() {
    [[ -n "${1}" ]] && local str1="${1}"
    [[ -n "${2}" ]] && local str2="${2}"
    dbus-send --print-reply --dest=org.freedesktop.Notifications --type=method_call /org/freedesktop/Notifications org.freedesktop.Notifications.Notify \
        string:"rofi" uint32:0 string:"" string:"${str1}" string:"${str2}" array:string:"" dict:string:variant:"","" int32:10000 &>/dev/null
    return $?
}

get_script_opts() {
    IFS=$'|';set -f;arguments=( ${1// -/|} );set +f;IFS=$' \n\t'
    local result=""
    for arg in "${arguments[@]}"; do
        key="${arg% *}"
        val="${arg/${key}/}"
        [[ "${!script_opts[*]}" =~ " ${key} " ]] && \
            result+="\x00${script_opts[$key]}\x1f$( [[ -z ${val#* } ]] && echo -n true || echo -n ${val#* })\n"
    done
    echo -e "${result}"
}

check_runtime_deps "${RDEPS}"
