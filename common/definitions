#!/usr/bin/env bash
# common auxiliary functions and definitions

shopt -s extglob
shopt -s dotglob
set +x
dryrun=false
force_dmenu=false
sep='\n'
default_icons="nf-icons"
default_lang="ru_RU"
default_themestr=""
rofiargs="-pid /run/user/$(id -u)/rofi.pid -replace -cycle -markup-rows -keep-left -sync -format p -sep ${sep}"
SPANATTRS="font_features='dlig=0, -kern, afrc on'"
active=""
urgent=""
header=""
theme=""
nbsp=$'\302\240'
source "./common/langs/${default_lang}"
source "./common/icons/${default_icons}"

# Check version of bash for variable indirection
case $BASH_VERSION in ''|[123].*|4.[012]) die 1 "Bash 4.3+ needed" ; esac

ROFI="/usr/bin/rofi"
SED="sed -u"
GREP="grep --color=never"
LS="ls -A --format=single-column --color=never"
FIND="gfind"
RDEPS+="${ROFI},${SED},${GREP},${LS},${FIND}"
MACADDR_SEDMASK="[[:xdigit:]:]\{11,17\}"
NF='
'

declare -A script_opts
script_opts=(
    [p]="prompt"
    [mesg]=message
    [markup-rows]="markup-rows"
    [u]="urgent"
    [a]="active"
    [theme-str]="theme"
    [no-custom]="no-custom"
    [use-hot-keys]="use-hot-keys"
    [keep-filter]="keep-filter"
    [keep-selection]="keep-selection"
    [new-selection]="new-selection"
)

declare -A anchors
anchors=(
	[northwest]=southeast [north]=south   [northeast]=southwest
	[west]=east           [center]=center [east]=west
	[southwest]=northeast [south]=north   [southeast]=northwest
	[top]=northeast [bottom]=southeast
)

declare -A xoffsets
xoffsets=(
    [northwest]="1" [north]="0" [northeast]="-1"
	[west]="1" [center]="0" [east]="-1"
	[southwest]="1" [south]="0" [southeast]="-1"
)

declare -A yoffsets
yoffsets=(
	[northwest]="1" [north]="1" [northeast]="1"
	[west]="0" [center]="0" [east]="0"
	[southwest]="-1" [south]="-1" [southeast]="-1"
)

declare -A bool
bool=( 
    [enabled]="true" [disabled]="false"
    [on]="true" [off]="false"
    [connect]="false" [disconnect]="true"
    [block]="false" [unblock]="true"
    [toggle]="true" [select]="false"
)

declare -A toggle
toggle=(
    [on]=off [off]=on
    [enable]=disable [disable]=enable
    [false]=true [true]=false
)

handle_common_opts() {
    while [ "$#" -ge 1 ]; do
        case "${1?${texts[missingarg]:-Missing argument} script options}" in
            -i|--no-icons) 
                unset -f icons
                rofiargs="${rofiargs// -no-show-icons} -no-show-icons"
                default_themestr+=" configuration { show-icons: false; }"
                shift
            ;;
            -l|--lang) 
                if [ -f "./common/langs/${2?${texts[missingarg]:-Missing argument} --lang}" ]; then
                    unset -f texts
                    common_usage=''
                    default_lang="${2}"
                    source "./common/langs/${default_lang}"
                fi
                shift 2
  	        ;;
            -f|--filter) 
                default_themestr+=" inputbar { enabled: true; } configuration { kb-clear-line: \"\"; }"
                shift
            ;;
            -o|--args)
                while read -r -d' ' arg; do rofiargs="${rofiargs// ${arg}} ${arg}"; done <<< "${2?${texts[missingarg]:-Missing argument}} "
                shift 2
            ;;
	        -m|--monitor) 
	            if [[ "${!anchors[@]}" != *${2?${texts[missingarg]:-Missing argument} --monitor}* ]]; then
		            warn "Invalid position: ${2}"
		            die -1 "Try e.g. 'northwest' or 'center' instead"
	            fi
	            rofiargs="${rofiargs// -m -3} -m -3"
	            default_themestr+=" window { anchor: ${anchors[${2}]}; location: center; } "
	            shift 2
	        ;;
	        -w|--window)
	            if [[ "${!anchors[@]}" != *${2?${texts[missingarg]:-Missing argument} --window}* ]]; then
		            warn "Invalid position: ${2}"
		            die -1 "Try e.g. 'northwest' or 'center' instead"
	            fi
	            rofiargs="${rofiargs// -m -2} -m -2"
	            default_themestr+=" window { anchor: ${2}; location: ${2}; x-offset: ${xoffsets[${2}]}em; y-offset: ${yoffsets[${2}]}em; } "
	            shift 2
	        ;;
	        --) shift; break ;;
	        -h|--help) 
	            die 0 "$usage"
	        ;;
	        *)
	            break
	        ;;
        esac
	done
}

write_script_entries() {
    get_script_opts "${rofiargs} "
    [[ -n "${active}" ]] && echo -e "\x00active\x1f${active}"
    [[ -n "${urgent}" ]] && echo -e "\x00urgent\x1f${urgent}"
    [[ -n "${delim}" ]] && echo -e "\x00delim\x1f${delim}"
    [[ -n "${prompt}" ]] && echo -e "\x00prompt\x1f<span $SPANATTRS>${prompt^}</span>"
    [[ -n "${header}" ]] && echo -e "\x00message\x1f<span $SPANATTRS>${header^}</span>"
    echo -e "\x00data\x1f${ROFI_DATA}"
    echo -en "${entries}"
}

handle_rofi() {
    local chosen= 
    local -i rofi_ret=
    [[ " ${rofiargs} " =~ " -dmenu " ]] && force_dmenu=true
    
    #send_notification "dmenu=${force_dmenu}"
    if ${force_dmenu}; then
        [[ -n "${active}" ]] && rofiargs+=" -a ${active}"
        [[ -n "${urgent}" ]] && rofiargs+=" -u ${urgent}"
        chosen=$(echo -en "${entries}" | ${ROFI} ${rofiargs} -mesg "${header^}" -window-title "${header^}" -theme-str "@import \"${theme}\"" -theme-str "${default_themestr}")
        rofi_ret=$?
        export ROFI_RETV=${rofi_ret}
        case ${ROFI_RETV} in
            0) # rofi: entry chosen
                run_menuentry_action "${chosen}"
            ;;
            1) # rofi: cancelled by user
                die 0 "${texts[canceled]:-"Cancelled..."}"
            ;;
            1[0-9]|2[0-8]) # rofi: pressed custom key
	            :
	            #send_notification "custom key"
            ;;
            *)  die ${ROFI_RETV} "${texts[error]^}: ${ROFI_RETV}"
            ;;
        esac
    else
        case ${ROFI_RETV} in
            "") # rofi: script called directly
                ${ROFI} ${rofiargs} -modi "urd:./${prog} ${args}" -show urd -theme-str "@import \"${theme}\"" -theme-str "${default_themestr}"
            ;;
            0) # rofi: initial call of script
                write_script_entries
            ;;
            1) # rofi: selected an entry
                run_menuentry_action "${args}"
                #send_notification "Info: ${ROFI_INFO}"
            ;;
            2) # rofi: selected custom entry
                :
            ;;
            3) # rofi: deleted entry
                :
            ;;
            1[0-9]|2[0-8]) # rofi: custom key
	            :
	        ;;
            *)  
                die ${ROFI_RETV} "${texts[error]^}: ${ROFI_RETV}"
            ;;
        esac
    fi
    return $?
}

# write message to stdout
warn() {
	[[ -n ${@} ]] && local message="${@}"
	printf "%s\n" "${message}"
}

# write error and exit
die() {
    local -i retcode=0 
    # don touch. if statement is urgent here
    if [[ -z "${1//[0-9-]/}" ]]; then retcode=${1}; shift; fi
    if [[ -n "${@}" ]]; then msg="${@}"; else msg="${texts[pogramterminated]^}. ${texts[error]^}: ${retcode}"; fi
	if [ ${retcode} -ne 0 ]; then send_notification "${msg^}"; fi
	#warn "${msg^}"
	exit ${retcode}
}

check_runtime_deps() {
    while read -r -d',' DEP; do
        command -v ${DEP} >/dev/null 2>&1 || die 1 "${texts[missingruntimedep]:-"Missing runtime dependency"} ${DEP}"
    done <<< "${1?${texts[missingarg]:-"Missing argument"} dep}"
}

get_branch_icon(){
    # $1 -- array length
    # $2 -- current index (count from 0)
    local arr_len="${1?${texts[missingarg]:-Missing argument} arr_len}"
    local index="${2?${texts[missingarg]:-Missing argument} index}"
    echo -n "<span ${SPANATTRS}>${branch[$([ "${arr_len}" -eq "$((${index}+1))" ] && echo 1 || echo 0)]}</span>"
}

write_menuentry() {
    # Creates listview element menuentry for rofi
    local code="00"
    local display="${1?${texts[missingarg]:-Missing argument} display text}"
    local action="${2}"
    local icon="${3}"
    local active="${4}"
    local permanent="${5}"
    local nonselectable="${6}"
    local urgent="${7}"
    local info="${8}"
    local meta="${9}"

    [[ -n "${action}" ]] && echo -n "${action}"
    [[ -n "${display}" ]] && echo -n "\x${code}display\x1f${display}" && code="1f"
    [[ -n "${icon}" ]] && echo -n "\x${code}icon\x1f${icon}" && code="1f"
    [[ -n "${info}" ]] && echo -n "\x${code}info\x1f${info}" && code="1f"
    [[ -n "${meta}" ]] && echo -n "\x${code}meta\x1f${meta}" && code="1f"
    [[ " true false " =~ " ${nonselectable} " ]] && ( echo -n "\x${code}nonselectable\x1f${nonselectable}" && code="1f" )
    [[ " true false " =~ " ${permanent} " ]] && ( echo -n "\x${code}permanent\x1f${permanent}" && code="1f" )
    [[ " true false " =~ " ${urgent} " ]] && ( echo -n "\x${code}urgent\x1f${urgent}" && code="1f" )
    [[ " true false " =~ " ${active} " ]] && ( echo -n "\x${code}active\x1f${active}" )
    echo -n "${sep}"
}

catch_posix() {
    # catch_posix STDOUT_VARIABLE STDERR_VARIABLE COMMAND
    local _CTRL_Z_=$'\cZ'
    {
        IFS=$NF"${_CTRL_Z_}" read -r -d"${_CTRL_Z_}" "${1}";
        IFS=$NF"${_CTRL_Z_}" read -r -d"${_CTRL_Z_}" "${2}";
        ( IFS=$NF"${_CTRL_Z_}" read -r -d"${_CTRL_Z_}" _ERRNO_; return ${_ERRNO_}; )
    } <<EOF
$( (printf "${_CTRL_Z_}%s${_CTRL_Z_}%d${_CTRL_Z_}" "$( ( ( ({ shift 2; "${@}"; echo "${?}" 1>&3-; } | cut -z -d"${_CTRL_Z_}" -f1 | tr -d '\0' 1>&4-) 4>&2- 2>&1- | cut -z -d"${_CTRL_Z_}" -f1 | tr -d '\0' 1>&4-) 3>&1- | exit "$(cat)") 4>&1-)" "${?}" 1>&2) 2>&1)
EOF
}
export -f catch_posix

confirm() {
    local action="${@?${texts[missingarg]:-Missing argument} action}"
    entries="$(write_menuentry "${texts[confirm]^}" "${action#confirm *}" "${icons[yes]}" "false" "true" "false" "false" "")"
    entries+="$(write_menuentry "${texts[cancel]^}" ":" "${icons[cancel]}" "false" "true" "false" "false" "${texts[cancelled]^}")"
    header="${texts[areyousure]^}"
    theme="./common/themes/confirm.rasi"
    rofiargs="${rofiargs// -selected-row 1} -selected-row 1"
    handle_rofi
    return $?
}
export -f confirm

run_menuentry_action() {
    local action="${@?${texts[missingarg]:-Missing argument} action}"
    local -i retcode=
    local error_msg=""
        
    export ROFI_RETV=0
    error_msg="${ROFI_INFO}"
    #send_notification "Chosen: ${action} Error msg: ${error_msg}"

    if ${dryrun}; then 
        send_notification "Dry run:" "${action} ${error_msg^}"
        return 0
    fi
    
    #catch_posix "retcode" "error_msg" "${action}"
    ${action} 1>/dev/null
    retcode=${retcode:-$?}
    if [ ${retcode} -ne 0 -a -n "${error_msg}" ]; then
        send_notification "${error_msg}. ${texts[error]^}: ${retcode}"
    fi
    return ${retcode}
}

send_notification() {
    local str1="${1?${texts[missingarg]:-Missing argument} str1}"; shift
    [[ -n "${@}" ]] && local str2="${@}"
    dbus-send --print-reply --dest=org.freedesktop.Notifications --type=method_call /org/freedesktop/Notifications org.freedesktop.Notifications.Notify \
        string:"${prog:-rofi}" uint32:0 string:"" string:"${str1}" string:"${str2}" array:string:"" dict:string:variant:"","" int32:10000 &>/dev/null
    return $?
}
export -f send_notification

get_script_opts() {
    local args=" ${@//\'}"
    local arg="" key="" val=""
    while IFS= read -r -d '|' arg ; do
        key="${arg% *}"
        val="${arg//${key}}"
        [[ " ${!script_opts[*]} " =~ " ${key} " ]] && \
            echo -e "\x00${script_opts[$key]}\x1f$( [[ -z "${val// }" ]] && echo -en "true" || echo -en "${val// }")" 
    done <<< "${args// -/|}|"
}

get_device_name(){
    local BUS=${1?${texts[missingarg]:-"Missing argument"} BUS}
    local VID=${2?${texts[missingarg]:-"Missing argument"} VID}
    local DEV=${3?${texts[missingarg]:-"Missing argument"} DEV}
    local IDS=${4?${texts[missingarg]:-"Missing argument"} IDS file}
    VID=${VID##*0000}
    DEV=${DEV##*0000}
    #This function is exported, so not using global var for sed
    vendor="$(sed -un 's/^'${VID}'  \(.\+\).*$/\1/p' ${IDS})"
    name="$(sed -un '/^'${VID}'/,/^\t'${DEV}'/{ s/^\t'${DEV}'  \(.\+\)$/\1/p; }' ${IDS})"
    echo -en "${BUS} ${name} ${vendor}"
    return $?
}
export -f get_device_name

check_runtime_deps "${RDEPS}"
